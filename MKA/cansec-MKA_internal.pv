(* Define the key type and secure communication channel *)
type key.             (* A type representing cryptographic keys *)
type number.
free scA: channel.    (* A secure public channel over which Alice and Bob communicate *)
free association_key:channel.
free key_packet:channel.

(* Encryption, Decryption, and HMAC functions *)
fun enc(bitstring, key): bitstring.             (* Symmetric encryption function *)
fun dec(bitstring, key): bitstring.             (* Symmetric decryption function *)
fun hmac(bitstring, number, number, key): bitstring.  (* HMAC function to provide integrity checks *)
fun mac (bitstring, number, key):bitstring.
fun kdf(key, number): key.                         (* Key derivation function *)
fun enc_key(key, key):bitstring.
fun dec_key(bitstring, key):key.

(* Symmetric encryption and decryption equations *)
equation forall m: bitstring, k: key; dec(enc(m, k), k) = m.   (* Decrypting an encrypted message with the same key yields the original message *)
equation forall m: bitstring, k: key; enc(dec(m, k), k) = m.   (* Encrypting a decrypted message with the same key yields the original message *)
equation forall k1: key, k: key; dec_key(enc_key(k1, k), k) = k1.

(* Tables holding freshness and key counter values for all peers *)
table freshness(bitstring, number, number).     (* Table tracking the latest received freshness value (packet number) for each channel and counter *)


(* Events marking message exchange between Alice and Bob *)
event message_received_Bob(bitstring, number).  (* Event indicating that Bob successfully received a message *)
event message_send_Alice(bitstring, number).    (* Event indicating that Alice sent a message *)

let Trant(an:number, szk:key, ick_context:number, kek_context:number) = 
    new sak:key;
    let ick = kdf(szk, ick_context) in
    let kek = kdf(szk, kek_context) in
    let k = enc_key(sak, kek) in
    let icv = mac(k, an, ick) in
    out(key_packet, (k, an, icv)).

(* Process representing Alice sending a message to Bob *)
let Alice(m: bitstring, sci_A: bitstring, szk: key, ick_context:number, kek_context:number) =
    in(key_packet, (k:bitstring, an:number, icv:bitstring));
    let ick = kdf(szk, ick_context) in
    let kek = kdf(szk, kek_context) in
    if icv <> mac(k, an, ick) then 0 else(
        let sak_alice = dec_key(k, szk) in
        out(association_key, (an, sci_A, sak_alice));
        new packet_number2:number;                                  (* Sets the packet number for the actual message packet *)
        let msg = enc(m, sak_alice) in                              (* Encrypts the message with the derived session key *)
        let icv2 = hmac(msg, an, packet_number2, sak_alice) in      (* Computes the ICV for the message packet *)
        event message_send_Alice(m, packet_number2);                (* Triggers the event to indicate that Alice has sent a message *)
        out(scA, (sci_A, an, packet_number2, msg, icv2))            (* Sends the message packet with its ICV *)
    ). 

(* Process representing Bob receiving and verifying a message from Alice *)
let Bob(sci_A: bitstring, szk: key, ick_context:number, kek_context:number) =
    in(scA, (sci: bitstring, an: number, packet_number: number, x: bitstring, icv: bitstring)); 
    (* using private channel for persistant memory *)
    in(association_key, (curr_an:number, sci_Alice:bitstring, ska_A:key));
        if an = curr_an then(
            get freshness(=sci, =an, fv) suchthat fv = packet_number in 0 else(  
            if sci = sci_A && icv = hmac(x, an, packet_number, ska_A) then  
                (let received_msg = dec(x, ska_A) in                         
                insert freshness(sci_A, an, packet_number);                  
                event message_received_Bob(received_msg, packet_number))     
            else 0)   
        )
        else(
            in(key_packet, (k:bitstring, an:number, icv:bitstring));
            let ick = kdf(szk, ick_context) in
            let kek = kdf(szk, kek_context) in
            if icv <> mac(k, an, ick) then 0 else(
                let sak_alice = dec_key(k, szk) in
                out(association_key, (an, sci_A, sak_alice))
                )
            ).

(* Confidentiality query: Ensure messages cannot be intercepted by an attacker *)
query m: bitstring, packet_number: number;
    event(message_received_Bob(m, packet_number)) && attacker(m) ==> false.

(* Authentication query to prevent replay attacks: Ensures only messages actually sent by Alice can be received by Bob *)
query m: bitstring, packet_number: number;
    inj-event(message_received_Bob(m, packet_number)) ==> inj-event(message_send_Alice(m, packet_number)).

(* Main process to simulate message exchange between Alice and Bob *)
process
    new szk: key;                     (* Creates a new zone key shared between Alice and Bob *)
    new sci_A: bitstring;             (* Generates a unique identifier for the secure channel *)
    new msg: bitstring;               (* Creates the message Alice will send to Bob *)
    new an:number;
    new packet_number: number;
    new kek_context:number;
    new ick_context:number;
    (* out(association_key, (an, sci_A, szk)); *)
    insert freshness(sci_A, an, packet_number);    (* Initializes the freshness table with a zero value for the secure channel *)
    (!Trant(an, szk, ick_context, kek_context) | !Alice(msg, sci_A, szk, ick_context, kek_context)) |
    
    phase 1;
    (!Alice(msg, sci_A, szk, ick_context, kek_context) | !Bob(sci_A, szk, ick_context, kek_context))  (* Spawns Alice and Bob processes for continuous message exchange *)
