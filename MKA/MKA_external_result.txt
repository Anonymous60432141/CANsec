File "cansec-MKA_external.pv", line 67, characters 42-43:
Warning: identifier an rebound.
File "cansec-MKA_external.pv", line 67, characters 53-55:
Warning: identifier icv rebound.
Linear part: No equation.
Convergent part:
dec(enc(m,k),k) = m
enc(dec(m,k),k) = m
dec_key(enc_key(k1,k),k) = k1
Completing equations...
Completed equations:
dec_key(enc_key(k1,k),k) = k1
enc(dec(m,k),k) = m
dec(enc(m,k),k) = m
Process 0 (that is, the initial process):
{1}new szk: key;
{2}new sci_A: bitstring;
{3}new msg: bitstring;
{4}new an: number;
{5}new packet_number: number;
{6}new kek_context: number;
{7}new ick_context: number;
{8}insert freshness(sci_A,an,packet_number);
(
    {9}!
    {10}let an_1: number = an in
    {11}let szk_1: key = szk in
    {12}let ick_context_1: number = ick_context in
    {13}let kek_context_1: number = kek_context in
    {14}new sak: key;
    {15}let ick: key = kdf(szk_1,ick_context_1) in
    {16}let kek: key = kdf(szk_1,kek_context_1) in
    {17}let k: bitstring = enc_key(sak,kek) in
    {18}let icv: bitstring = mac(k,an_1,ick) in
    {19}out(key_packet, (k,an_1,icv))
) | (
    {20}!
    {21}let m: bitstring = msg in
    {22}let sci_A_1: bitstring = sci_A in
    {23}let szk_2: key = szk in
    {24}let ick_context_2: number = ick_context in
    {25}let kek_context_2: number = kek_context in
    {26}in(key_packet, (k_1: bitstring,an_2: number,icv_1: bitstring));
    {27}let ick_1: key = kdf(szk_2,ick_context_2) in
    {28}let kek_1: key = kdf(szk_2,kek_context_2) in
    {29}if (icv_1 ≠ mac(k_1,an_2,ick_1)) then
        0
    else
        {30}let sak_alice: key = dec_key(k_1,szk_2) in
        {31}out(association_key, (an_2,sci_A_1,sak_alice));
        {32}new packet_number2: number;
        {33}let msg_1: bitstring = enc(m,sak_alice) in
        {34}let icv2: bitstring = hmac(msg_1,an_2,packet_number2,sak_alice) in
        {35}event message_send_Alice(m,packet_number2);
        {36}out(scA, (sci_A_1,an_2,packet_number2,msg_1,icv2))
) | (
    {37}phase 1;
    (
        {38}!
        {39}let m_1: bitstring = msg in
        {40}let sci_A_2: bitstring = sci_A in
        {41}let szk_3: key = szk in
        {42}let ick_context_3: number = ick_context in
        {43}let kek_context_3: number = kek_context in
        {44}in(key_packet, (k_2: bitstring,an_3: number,icv_2: bitstring));
        {45}let ick_2: key = kdf(szk_3,ick_context_3) in
        {46}let kek_2: key = kdf(szk_3,kek_context_3) in
        {47}if (icv_2 ≠ mac(k_2,an_3,ick_2)) then
            0
        else
            {48}let sak_alice_1: key = dec_key(k_2,szk_3) in
            {49}out(association_key, (an_3,sci_A_2,sak_alice_1));
            {50}new packet_number2_1: number;
            {51}let msg_2: bitstring = enc(m_1,sak_alice_1) in
            {52}let icv2_1: bitstring = hmac(msg_2,an_3,packet_number2_1,sak_alice_1) in
            {53}event message_send_Alice(m_1,packet_number2_1);
            {54}out(scA, (sci_A_2,an_3,packet_number2_1,msg_2,icv2_1))
    ) | (
        {55}!
        {56}let sci_A_3: bitstring = sci_A in
        {57}let szk_4: key = szk in
        {58}let ick_context_4: number = ick_context in
        {59}let kek_context_4: number = kek_context in
        {60}in(scA, (sci: bitstring,an_4: number,packet_number_1: number,x: bitstring,icv_3: bitstring));
        {61}in(association_key, (curr_an: number,sci_Alice: bitstring,ska_A: key));
        {62}if (an_4 = curr_an) then
        (
            {67}get freshness(=sci,=an_4,fv: number) suchthat (fv = packet_number_1) in
                0
            else
                {63}if ((sci = sci_A_3) && (icv_3 = hmac(x,an_4,packet_number_1,ska_A))) then
                {64}let received_msg: bitstring = dec(x,ska_A) in
                {65}insert freshness(sci_A_3,an_4,packet_number_1);
                {66}event message_received_Bob(received_msg,packet_number_1)
        )
        else
            {68}in(key_packet, (k_3: bitstring,an_5: number,icv_4: bitstring));
            {69}let ick_3: key = kdf(szk_4,ick_context_4) in
            {70}let kek_3: key = kdf(szk_4,kek_context_4) in
            {71}if (icv_4 ≠ mac(k_3,an_5,ick_3)) then
                0
            else
                {72}let sak_alice_2: key = dec_key(k_3,szk_4) in
                {73}out(association_key, (an_5,sci_A_3,sak_alice_2))
    )
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}new szk: key;
{2}new sci_A: bitstring;
{3}new msg: bitstring;
{4}new an: number;
{5}new packet_number: number;
{6}new kek_context: number;
{7}new ick_context: number;
{8}insert freshness(sci_A,an,packet_number);
(
    {9}!
    {14}new sak: key;
    {13}let kek_context_1: number = kek_context in
    {11}let szk_1: key = szk in
    {16}let kek: key = kdf(szk_1,kek_context_1) in
    {17}let k: bitstring = enc_key(sak,kek) in
    {12}let ick_context_1: number = ick_context in
    {15}let ick: key = kdf(szk_1,ick_context_1) in
    {10}let an_1: number = an in
    {18}let icv: bitstring = mac(k,an_1,ick) in
    {19}out(key_packet, (k,an_1,icv))
) | (
    {20}!
    {26}in(key_packet, (k_1: bitstring,an_2: number,icv_1: bitstring));
    {24}let ick_context_2: number = ick_context in
    {23}let szk_2: key = szk in
    {27}let ick_1: key = kdf(szk_2,ick_context_2) in
    {29}if (icv_1 ≠ mac(k_1,an_2,ick_1)) then
        0
    else
        {30}let sak_alice: key = dec_key(k_1,szk_2) in
        {22}let sci_A_1: bitstring = sci_A in
        {31}out(association_key, (an_2,sci_A_1,sak_alice));
        {32}new packet_number2: number;
        {21}let m: bitstring = msg in
        {35}event message_send_Alice(m,packet_number2);
        {33}let msg_1: bitstring = enc(m,sak_alice) in
        {34}let icv2: bitstring = hmac(msg_1,an_2,packet_number2,sak_alice) in
        {36}out(scA, (sci_A_1,an_2,packet_number2,msg_1,icv2))
) | (
    {37}phase 1;
    (
        {38}!
        {44}in(key_packet, (k_2: bitstring,an_3: number,icv_2: bitstring));
        {42}let ick_context_3: number = ick_context in
        {41}let szk_3: key = szk in
        {45}let ick_2: key = kdf(szk_3,ick_context_3) in
        {47}if (icv_2 ≠ mac(k_2,an_3,ick_2)) then
            0
        else
            {48}let sak_alice_1: key = dec_key(k_2,szk_3) in
            {40}let sci_A_2: bitstring = sci_A in
            {49}out(association_key, (an_3,sci_A_2,sak_alice_1));
            {50}new packet_number2_1: number;
            {39}let m_1: bitstring = msg in
            {53}event message_send_Alice(m_1,packet_number2_1);
            {51}let msg_2: bitstring = enc(m_1,sak_alice_1) in
            {52}let icv2_1: bitstring = hmac(msg_2,an_3,packet_number2_1,sak_alice_1) in
            {54}out(scA, (sci_A_2,an_3,packet_number2_1,msg_2,icv2_1))
    ) | (
        {55}!
        {60}in(scA, (sci: bitstring,an_4: number,packet_number_1: number,x: bitstring,icv_3: bitstring));
        {61}in(association_key, (curr_an: number,sci_Alice: bitstring,ska_A: key));
        {56}let sci_A_3: bitstring = sci_A in
        {62}if (an_4 = curr_an) then
        (
            {67}get freshness(=sci,=an_4,fv: number) suchthat (fv = packet_number_1) in
                0
            else
                {63}if ((sci = sci_A_3) && (icv_3 = hmac(x,an_4,packet_number_1,ska_A))) then
                {65}insert freshness(sci_A_3,an_4,packet_number_1);
                {64}let received_msg: bitstring = dec(x,ska_A) in
                {66}event message_received_Bob(received_msg,packet_number_1)
        )
        else
            {68}in(key_packet, (k_3: bitstring,an_5: number,icv_4: bitstring));
            {58}let ick_context_4: number = ick_context in
            {57}let szk_4: key = szk in
            {69}let ick_3: key = kdf(szk_4,ick_context_4) in
            {71}if (icv_4 ≠ mac(k_3,an_5,ick_3)) then
                0
            else
                {72}let sak_alice_2: key = dec_key(k_3,szk_4) in
                {73}out(association_key, (an_5,sci_A_3,sak_alice_2))
    )
)

-- Query not (event(message_received_Bob(m_2,packet_number_2)) && attacker_p1(m_2)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 198 rules (43 with conclusion selected). Queue: 21 rules.
Starting query not (event(message_received_Bob(m_2,packet_number_2)) && attacker_p1(m_2))
RESULT not (event(message_received_Bob(m_2,packet_number_2)) && attacker_p1(m_2)) is true.
-- Query inj-event(message_received_Bob(m_2,packet_number_2)) ==> inj-event(message_send_Alice(m_2,packet_number_2)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 199 rules (43 with conclusion selected). Queue: 23 rules.
Starting query inj-event(message_received_Bob(m_2,packet_number_2)) ==> inj-event(message_send_Alice(m_2,packet_number_2))
RESULT inj-event(message_received_Bob(m_2,packet_number_2)) ==> inj-event(message_send_Alice(m_2,packet_number_2)) is true.

--------------------------------------------------------------
Verification summary:

Query not (event(message_received_Bob(m_2,packet_number_2)) && attacker_p1(m_2)) is true.

Query inj-event(message_received_Bob(m_2,packet_number_2)) ==> inj-event(message_send_Alice(m_2,packet_number_2)) is true.

--------------------------------------------------------------

