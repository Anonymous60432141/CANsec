File "cansec-MKA_internal.pv", line 67, characters 42-43:
Warning: identifier an rebound.
File "cansec-MKA_internal.pv", line 67, characters 53-55:
Warning: identifier icv rebound.
Linear part: No equation.
Convergent part:
dec(enc(m,k),k) = m
enc(dec(m,k),k) = m
dec_key(enc_key(k1,k),k) = k1
Completing equations...
Completed equations:
dec_key(enc_key(k1,k),k) = k1
enc(dec(m,k),k) = m
dec(enc(m,k),k) = m
Process 0 (that is, the initial process):
{1}new szk: key;
{2}new sci_A: bitstring;
{3}new msg: bitstring;
{4}new an: number;
{5}new packet_number: number;
{6}new kek_context: number;
{7}new ick_context: number;
{8}insert freshness(sci_A,an,packet_number);
(
    {9}!
    {10}let an_1: number = an in
    {11}let szk_1: key = szk in
    {12}let ick_context_1: number = ick_context in
    {13}let kek_context_1: number = kek_context in
    {14}new sak: key;
    {15}let ick: key = kdf(szk_1,ick_context_1) in
    {16}let kek: key = kdf(szk_1,kek_context_1) in
    {17}let k: bitstring = enc_key(sak,kek) in
    {18}let icv: bitstring = mac(k,an_1,ick) in
    {19}out(key_packet, (k,an_1,icv))
) | (
    {20}!
    {21}let m: bitstring = msg in
    {22}let sci_A_1: bitstring = sci_A in
    {23}let szk_2: key = szk in
    {24}let ick_context_2: number = ick_context in
    {25}let kek_context_2: number = kek_context in
    {26}in(key_packet, (k_1: bitstring,an_2: number,icv_1: bitstring));
    {27}let ick_1: key = kdf(szk_2,ick_context_2) in
    {28}let kek_1: key = kdf(szk_2,kek_context_2) in
    {29}if (icv_1 ≠ mac(k_1,an_2,ick_1)) then
        0
    else
        {30}let sak_alice: key = dec_key(k_1,szk_2) in
        {31}out(association_key, (an_2,sci_A_1,sak_alice));
        {32}new packet_number2: number;
        {33}let msg_1: bitstring = enc(m,sak_alice) in
        {34}let icv2: bitstring = hmac(msg_1,an_2,packet_number2,sak_alice) in
        {35}event message_send_Alice(m,packet_number2);
        {36}out(scA, (sci_A_1,an_2,packet_number2,msg_1,icv2))
) | (
    {37}phase 1;
    (
        {38}!
        {39}let m_1: bitstring = msg in
        {40}let sci_A_2: bitstring = sci_A in
        {41}let szk_3: key = szk in
        {42}let ick_context_3: number = ick_context in
        {43}let kek_context_3: number = kek_context in
        {44}in(key_packet, (k_2: bitstring,an_3: number,icv_2: bitstring));
        {45}let ick_2: key = kdf(szk_3,ick_context_3) in
        {46}let kek_2: key = kdf(szk_3,kek_context_3) in
        {47}if (icv_2 ≠ mac(k_2,an_3,ick_2)) then
            0
        else
            {48}let sak_alice_1: key = dec_key(k_2,szk_3) in
            {49}out(association_key, (an_3,sci_A_2,sak_alice_1));
            {50}new packet_number2_1: number;
            {51}let msg_2: bitstring = enc(m_1,sak_alice_1) in
            {52}let icv2_1: bitstring = hmac(msg_2,an_3,packet_number2_1,sak_alice_1) in
            {53}event message_send_Alice(m_1,packet_number2_1);
            {54}out(scA, (sci_A_2,an_3,packet_number2_1,msg_2,icv2_1))
    ) | (
        {55}!
        {56}let sci_A_3: bitstring = sci_A in
        {57}let szk_4: key = szk in
        {58}let ick_context_4: number = ick_context in
        {59}let kek_context_4: number = kek_context in
        {60}in(scA, (sci: bitstring,an_4: number,packet_number_1: number,x: bitstring,icv_3: bitstring));
        {61}in(association_key, (curr_an: number,sci_Alice: bitstring,ska_A: key));
        {62}if (an_4 = curr_an) then
        (
            {67}get freshness(=sci,=an_4,fv: number) suchthat (fv = packet_number_1) in
                0
            else
                {63}if ((sci = sci_A_3) && (icv_3 = hmac(x,an_4,packet_number_1,ska_A))) then
                {64}let received_msg: bitstring = dec(x,ska_A) in
                {65}insert freshness(sci_A_3,an_4,packet_number_1);
                {66}event message_received_Bob(received_msg,packet_number_1)
        )
        else
            {68}in(key_packet, (k_3: bitstring,an_5: number,icv_4: bitstring));
            {69}let ick_3: key = kdf(szk_4,ick_context_4) in
            {70}let kek_3: key = kdf(szk_4,kek_context_4) in
            {71}if (icv_4 ≠ mac(k_3,an_5,ick_3)) then
                0
            else
                {72}let sak_alice_2: key = dec_key(k_3,szk_4) in
                {73}out(association_key, (an_5,sci_A_3,sak_alice_2))
    )
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}new szk: key;
{2}new sci_A: bitstring;
{3}new msg: bitstring;
{4}new an: number;
{5}new packet_number: number;
{6}new kek_context: number;
{7}new ick_context: number;
{8}insert freshness(sci_A,an,packet_number);
(
    {9}!
    {14}new sak: key;
    {13}let kek_context_1: number = kek_context in
    {11}let szk_1: key = szk in
    {16}let kek: key = kdf(szk_1,kek_context_1) in
    {17}let k: bitstring = enc_key(sak,kek) in
    {12}let ick_context_1: number = ick_context in
    {15}let ick: key = kdf(szk_1,ick_context_1) in
    {10}let an_1: number = an in
    {18}let icv: bitstring = mac(k,an_1,ick) in
    {19}out(key_packet, (k,an_1,icv))
) | (
    {20}!
    {26}in(key_packet, (k_1: bitstring,an_2: number,icv_1: bitstring));
    {24}let ick_context_2: number = ick_context in
    {23}let szk_2: key = szk in
    {27}let ick_1: key = kdf(szk_2,ick_context_2) in
    {29}if (icv_1 ≠ mac(k_1,an_2,ick_1)) then
        0
    else
        {30}let sak_alice: key = dec_key(k_1,szk_2) in
        {22}let sci_A_1: bitstring = sci_A in
        {31}out(association_key, (an_2,sci_A_1,sak_alice));
        {32}new packet_number2: number;
        {21}let m: bitstring = msg in
        {35}event message_send_Alice(m,packet_number2);
        {33}let msg_1: bitstring = enc(m,sak_alice) in
        {34}let icv2: bitstring = hmac(msg_1,an_2,packet_number2,sak_alice) in
        {36}out(scA, (sci_A_1,an_2,packet_number2,msg_1,icv2))
) | (
    {37}phase 1;
    (
        {38}!
        {44}in(key_packet, (k_2: bitstring,an_3: number,icv_2: bitstring));
        {42}let ick_context_3: number = ick_context in
        {41}let szk_3: key = szk in
        {45}let ick_2: key = kdf(szk_3,ick_context_3) in
        {47}if (icv_2 ≠ mac(k_2,an_3,ick_2)) then
            0
        else
            {48}let sak_alice_1: key = dec_key(k_2,szk_3) in
            {40}let sci_A_2: bitstring = sci_A in
            {49}out(association_key, (an_3,sci_A_2,sak_alice_1));
            {50}new packet_number2_1: number;
            {39}let m_1: bitstring = msg in
            {53}event message_send_Alice(m_1,packet_number2_1);
            {51}let msg_2: bitstring = enc(m_1,sak_alice_1) in
            {52}let icv2_1: bitstring = hmac(msg_2,an_3,packet_number2_1,sak_alice_1) in
            {54}out(scA, (sci_A_2,an_3,packet_number2_1,msg_2,icv2_1))
    ) | (
        {55}!
        {60}in(scA, (sci: bitstring,an_4: number,packet_number_1: number,x: bitstring,icv_3: bitstring));
        {61}in(association_key, (curr_an: number,sci_Alice: bitstring,ska_A: key));
        {56}let sci_A_3: bitstring = sci_A in
        {62}if (an_4 = curr_an) then
        (
            {67}get freshness(=sci,=an_4,fv: number) suchthat (fv = packet_number_1) in
                0
            else
                {63}if ((sci = sci_A_3) && (icv_3 = hmac(x,an_4,packet_number_1,ska_A))) then
                {65}insert freshness(sci_A_3,an_4,packet_number_1);
                {64}let received_msg: bitstring = dec(x,ska_A) in
                {66}event message_received_Bob(received_msg,packet_number_1)
        )
        else
            {68}in(key_packet, (k_3: bitstring,an_5: number,icv_4: bitstring));
            {58}let ick_context_4: number = ick_context in
            {57}let szk_4: key = szk in
            {69}let ick_3: key = kdf(szk_4,ick_context_4) in
            {71}if (icv_4 ≠ mac(k_3,an_5,ick_3)) then
                0
            else
                {72}let sak_alice_2: key = dec_key(k_3,szk_4) in
                {73}out(association_key, (an_5,sci_A_3,sak_alice_2))
    )
)

-- Query not (event(message_received_Bob(m_2,packet_number_2)) && attacker_p1(m_2)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 161 rules (45 with conclusion selected). Queue: 19 rules.
Starting query not (event(message_received_Bob(m_2,packet_number_2)) && attacker_p1(m_2))
goal reachable: attacker_p1(packet_number_2) && attacker_p1(m_2) -> event(message_received_Bob(m_2,packet_number_2)) && attacker_p1(m_2)

Derivation:
Abbreviations:
sak_1 = sak[!1 = @sid]
sak_2 = sak[!1 = @sid_1]

1. We assume as hypothesis that
attacker_p1(m_2).

2. The attacker has some term k_4 in phase 1.
attacker_p1(k_4).

3. We assume as hypothesis that
attacker_p1(packet_number_2).

4. The attacker has some term an_6 in phase 1.
attacker_p1(an_6).

5. By 1, the attacker may know m_2 in phase 1.
By 2, the attacker may know k_4 in phase 1.
Using the function enc the attacker may obtain enc(m_2,k_4) in phase 1.
attacker_p1(enc(m_2,k_4)).

6. By 5, the attacker may know enc(m_2,k_4) in phase 1.
By 4, the attacker may know an_6 in phase 1.
By 3, the attacker may know packet_number_2 in phase 1.
By 2, the attacker may know k_4 in phase 1.
Using the function hmac the attacker may obtain hmac(enc(m_2,k_4),an_6,packet_number_2,k_4) in phase 1.
attacker_p1(hmac(enc(m_2,k_4),an_6,packet_number_2,k_4)).

7. The message (enc_key(sak_1,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[]))) may be sent to the attacker at output {19}.
attacker((enc_key(sak_1,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[])))).

8. By 7, the attacker may know (enc_key(sak_1,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[]))).
Using the function 3-proj-3-tuple the attacker may obtain mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[])).
attacker(mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[]))).

9. The message (enc_key(sak_2,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_2,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[]))) may be sent to the attacker at output {19}.
attacker((enc_key(sak_2,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_2,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[])))).

10. By 9, the attacker may know (enc_key(sak_2,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_2,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[]))).
Using the function 2-proj-3-tuple the attacker may obtain an[].
attacker(an[]).

11. By 7, the attacker may know (enc_key(sak_1,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[]))).
Using the function 1-proj-3-tuple the attacker may obtain enc_key(sak_1,kdf(szk[],kek_context[])).
attacker(enc_key(sak_1,kdf(szk[],kek_context[]))).

12. By 11, the attacker may know enc_key(sak_1,kdf(szk[],kek_context[])).
By 10, the attacker may know an[].
By 8, the attacker may know mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[])).
Using the function 3-tuple the attacker may obtain (enc_key(sak_1,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[]))).
attacker((enc_key(sak_1,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[])))).

13. The message (enc_key(sak_1,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[]))) that the attacker may have by 12 may be received at input {26}.
So the message (an[],sci_A[],dec_key(enc_key(sak_1,kdf(szk[],kek_context[])),szk[])) may be sent to the attacker at output {31}.
attacker((an[],sci_A[],dec_key(enc_key(sak_1,kdf(szk[],kek_context[])),szk[]))).

14. By 13, the attacker may know (an[],sci_A[],dec_key(enc_key(sak_1,kdf(szk[],kek_context[])),szk[])).
Using the function 2-proj-3-tuple the attacker may obtain sci_A[].
attacker(sci_A[]).

15. By 14, the attacker may know sci_A[].
So the attacker may know sci_A[] in phase 1.
attacker_p1(sci_A[]).

16. By 15, the attacker may know sci_A[] in phase 1.
By 4, the attacker may know an_6 in phase 1.
By 3, the attacker may know packet_number_2 in phase 1.
By 5, the attacker may know enc(m_2,k_4) in phase 1.
By 6, the attacker may know hmac(enc(m_2,k_4),an_6,packet_number_2,k_4) in phase 1.
Using the function 5-tuple the attacker may obtain (sci_A[],an_6,packet_number_2,enc(m_2,k_4),hmac(enc(m_2,k_4),an_6,packet_number_2,k_4)) in phase 1.
attacker_p1((sci_A[],an_6,packet_number_2,enc(m_2,k_4),hmac(enc(m_2,k_4),an_6,packet_number_2,k_4))).

17. The attacker has some term sci_Alice_1 in phase 1.
attacker_p1(sci_Alice_1).

18. By 4, the attacker may know an_6 in phase 1.
By 17, the attacker may know sci_Alice_1 in phase 1.
By 2, the attacker may know k_4 in phase 1.
Using the function 3-tuple the attacker may obtain (an_6,sci_Alice_1,k_4) in phase 1.
attacker_p1((an_6,sci_Alice_1,k_4)).

19. The message (sci_A[],an_6,packet_number_2,enc(m_2,k_4),hmac(enc(m_2,k_4),an_6,packet_number_2,k_4)) that the attacker may have in phase 1 by 16 may be received at input {60}.
The message (an_6,sci_Alice_1,k_4) that the attacker may have in phase 1 by 18 may be received at input {61}.
So event message_received_Bob(m_2,packet_number_2) may be executed at {66}.
event(message_received_Bob(m_2,packet_number_2)).

20. By 19, event(message_received_Bob(m_2,packet_number_2)).
By 1, attacker_p1(m_2).
The goals are reached, combined in the following fact:
event(message_received_Bob(m_2,packet_number_2)) && attacker_p1(m_2).


A more detailed output of the traces is available with
  set traceDisplay = long.

new szk: key creating szk_5 at {1}

new sci_A: bitstring creating sci_A_4 at {2}

new msg: bitstring creating msg_3 at {3}

new an: number creating an_7 at {4}

new packet_number: number creating packet_number_3 at {5}

new kek_context: number creating kek_context_5 at {6}

new ick_context: number creating ick_context_5 at {7}

insert freshness(sci_A_4,an_7,packet_number_3) at {8}

new sak: key creating sak_3 at {14} in copy a

out(key_packet, (~M,~M_1,~M_2)) with ~M = enc_key(sak_3,kdf(szk_5,kek_context_5)), ~M_1 = an_7, ~M_2 = mac(enc_key(sak_3,kdf(szk_5,kek_context_5)),an_7,kdf(szk_5,ick_context_5)) at {19} in copy a

new sak: key creating sak_4 at {14} in copy a_1

out(key_packet, (~M_3,~M_4,~M_5)) with ~M_3 = enc_key(sak_4,kdf(szk_5,kek_context_5)), ~M_4 = an_7, ~M_5 = mac(enc_key(sak_4,kdf(szk_5,kek_context_5)),an_7,kdf(szk_5,ick_context_5)) at {19} in copy a_1

in(key_packet, (~M,~M_1,~M_2)) with ~M = enc_key(sak_3,kdf(szk_5,kek_context_5)), ~M_1 = an_7, ~M_2 = mac(enc_key(sak_3,kdf(szk_5,kek_context_5)),an_7,kdf(szk_5,ick_context_5)) at {26} in copy a_2

out(association_key, (~M_6,~M_7,~M_8)) with ~M_6 = an_7, ~M_7 = sci_A_4, ~M_8 = dec_key(enc_key(sak_3,kdf(szk_5,kek_context_5)),szk_5) at {31} in copy a_2

new packet_number2: number creating packet_number2_2 at {32} in copy a_2

event message_send_Alice(msg_3,packet_number2_2) at {35} in copy a_2

out(scA, (~M_9,~M_10,~M_11,~M_12,~M_13)) with ~M_9 = sci_A_4, ~M_10 = an_7, ~M_11 = packet_number2_2, ~M_12 = enc(msg_3,dec_key(enc_key(sak_3,kdf(szk_5,kek_context_5)),szk_5)), ~M_13 = hmac(enc(msg_3,dec_key(enc_key(sak_3,kdf(szk_5,kek_context_5)),szk_5)),an_7,packet_number2_2,dec_key(enc_key(sak_3,kdf(szk_5,kek_context_5)),szk_5)) at {36} in copy a_2

in(scA, (~M_7,a_3,a_4,enc(a_5,a_6),hmac(enc(a_5,a_6),a_3,a_4,a_6))) with ~M_7 = sci_A_4 at {60} in copy a_7

in(association_key, (a_3,a_8,a_6)) at {61} in copy a_7

get freshness(=sci_A_4,=a_3,fv: number) suchthat (fv = a_4): else branch taken at {67} in copy a_7

insert freshness(sci_A_4,a_3,a_4) at {65} in copy a_7

event message_received_Bob(dec(enc(a_5,a_6),a_6),a_4) at {66} in copy a_7 (goal)

The event message_received_Bob(a_5,a_4) is executed at {66} in copy a_7.
The attacker has the message a_5 in phase 1.
A trace has been found.
RESULT not (event(message_received_Bob(m_2,packet_number_2)) && attacker_p1(m_2)) is false.
-- Query inj-event(message_received_Bob(m_2,packet_number_2)) ==> inj-event(message_send_Alice(m_2,packet_number_2)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 162 rules (46 with conclusion selected). Queue: 19 rules.
Starting query inj-event(message_received_Bob(m_2,packet_number_2)) ==> inj-event(message_send_Alice(m_2,packet_number_2))
goal reachable: attacker_p1(sci_Alice_1) && attacker_p1(m_2) && attacker_p1(an_6) && attacker_p1(packet_number_2) && attacker_p1(k_4) -> inj-event(message_received_Bob(m_2,packet_number_2),@occ66_1)
Abbreviations:
@occ66_1 = @occ66[ska_A = k_4,sci_Alice = sci_Alice_1,curr_an = an_6,icv_3 = hmac(enc(m_2,k_4),an_6,packet_number_2,k_4),x = enc(m_2,k_4),packet_number_1 = packet_number_2,an_4 = an_6,sci = sci_A[],!1 = @sid]

Derivation:
Abbreviations:
@occ66_1 = @occ66[ska_A = k_4,sci_Alice = sci_Alice_1,curr_an = an_6,icv_3 = hmac(enc(m_2,k_4),an_6,packet_number_2,k_4),x = enc(m_2,k_4),packet_number_1 = packet_number_2,an_4 = an_6,sci = sci_A[],!1 = @sid]
sak_1 = sak[!1 = @sid_1]
sak_2 = sak[!1 = @sid_2]

1. We assume as hypothesis that
attacker_p1(k_4).

2. We assume as hypothesis that
attacker_p1(packet_number_2).

3. We assume as hypothesis that
attacker_p1(an_6).

4. We assume as hypothesis that
attacker_p1(m_2).

5. By 4, the attacker may know m_2 in phase 1.
By 1, the attacker may know k_4 in phase 1.
Using the function enc the attacker may obtain enc(m_2,k_4) in phase 1.
attacker_p1(enc(m_2,k_4)).

6. By 5, the attacker may know enc(m_2,k_4) in phase 1.
By 3, the attacker may know an_6 in phase 1.
By 2, the attacker may know packet_number_2 in phase 1.
By 1, the attacker may know k_4 in phase 1.
Using the function hmac the attacker may obtain hmac(enc(m_2,k_4),an_6,packet_number_2,k_4) in phase 1.
attacker_p1(hmac(enc(m_2,k_4),an_6,packet_number_2,k_4)).

7. The message (enc_key(sak_1,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[]))) may be sent to the attacker at output {19}.
attacker((enc_key(sak_1,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[])))).

8. By 7, the attacker may know (enc_key(sak_1,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[]))).
Using the function 3-proj-3-tuple the attacker may obtain mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[])).
attacker(mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[]))).

9. The message (enc_key(sak_2,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_2,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[]))) may be sent to the attacker at output {19}.
attacker((enc_key(sak_2,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_2,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[])))).

10. By 9, the attacker may know (enc_key(sak_2,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_2,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[]))).
Using the function 2-proj-3-tuple the attacker may obtain an[].
attacker(an[]).

11. By 7, the attacker may know (enc_key(sak_1,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[]))).
Using the function 1-proj-3-tuple the attacker may obtain enc_key(sak_1,kdf(szk[],kek_context[])).
attacker(enc_key(sak_1,kdf(szk[],kek_context[]))).

12. By 11, the attacker may know enc_key(sak_1,kdf(szk[],kek_context[])).
By 10, the attacker may know an[].
By 8, the attacker may know mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[])).
Using the function 3-tuple the attacker may obtain (enc_key(sak_1,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[]))).
attacker((enc_key(sak_1,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[])))).

13. The message (enc_key(sak_1,kdf(szk[],kek_context[])),an[],mac(enc_key(sak_1,kdf(szk[],kek_context[])),an[],kdf(szk[],ick_context[]))) that the attacker may have by 12 may be received at input {26}.
So the message (an[],sci_A[],dec_key(enc_key(sak_1,kdf(szk[],kek_context[])),szk[])) may be sent to the attacker at output {31}.
attacker((an[],sci_A[],dec_key(enc_key(sak_1,kdf(szk[],kek_context[])),szk[]))).

14. By 13, the attacker may know (an[],sci_A[],dec_key(enc_key(sak_1,kdf(szk[],kek_context[])),szk[])).
Using the function 2-proj-3-tuple the attacker may obtain sci_A[].
attacker(sci_A[]).

15. By 14, the attacker may know sci_A[].
So the attacker may know sci_A[] in phase 1.
attacker_p1(sci_A[]).

16. By 15, the attacker may know sci_A[] in phase 1.
By 3, the attacker may know an_6 in phase 1.
By 2, the attacker may know packet_number_2 in phase 1.
By 5, the attacker may know enc(m_2,k_4) in phase 1.
By 6, the attacker may know hmac(enc(m_2,k_4),an_6,packet_number_2,k_4) in phase 1.
Using the function 5-tuple the attacker may obtain (sci_A[],an_6,packet_number_2,enc(m_2,k_4),hmac(enc(m_2,k_4),an_6,packet_number_2,k_4)) in phase 1.
attacker_p1((sci_A[],an_6,packet_number_2,enc(m_2,k_4),hmac(enc(m_2,k_4),an_6,packet_number_2,k_4))).

17. We assume as hypothesis that
attacker_p1(sci_Alice_1).

18. By 3, the attacker may know an_6 in phase 1.
By 17, the attacker may know sci_Alice_1 in phase 1.
By 1, the attacker may know k_4 in phase 1.
Using the function 3-tuple the attacker may obtain (an_6,sci_Alice_1,k_4) in phase 1.
attacker_p1((an_6,sci_Alice_1,k_4)).

19. The message (sci_A[],an_6,packet_number_2,enc(m_2,k_4),hmac(enc(m_2,k_4),an_6,packet_number_2,k_4)) that the attacker may have in phase 1 by 16 may be received at input {60}.
The message (an_6,sci_Alice_1,k_4) that the attacker may have in phase 1 by 18 may be received at input {61}.
So event message_received_Bob(m_2,packet_number_2) may be executed at {66} in session @sid.
inj-event(message_received_Bob(m_2,packet_number_2),@occ66_1).

20. By 19, inj-event(message_received_Bob(m_2,packet_number_2),@occ66_1).
The goal is reached, represented in the following fact:
inj-event(message_received_Bob(m_2,packet_number_2),@occ66_1).


A more detailed output of the traces is available with
  set traceDisplay = long.

new szk: key creating szk_5 at {1}

new sci_A: bitstring creating sci_A_4 at {2}

new msg: bitstring creating msg_3 at {3}

new an: number creating an_7 at {4}

new packet_number: number creating packet_number_3 at {5}

new kek_context: number creating kek_context_5 at {6}

new ick_context: number creating ick_context_5 at {7}

insert freshness(sci_A_4,an_7,packet_number_3) at {8}

new sak: key creating sak_3 at {14} in copy a

out(key_packet, (~M,~M_1,~M_2)) with ~M = enc_key(sak_3,kdf(szk_5,kek_context_5)), ~M_1 = an_7, ~M_2 = mac(enc_key(sak_3,kdf(szk_5,kek_context_5)),an_7,kdf(szk_5,ick_context_5)) at {19} in copy a

new sak: key creating sak_4 at {14} in copy a_1

out(key_packet, (~M_3,~M_4,~M_5)) with ~M_3 = enc_key(sak_4,kdf(szk_5,kek_context_5)), ~M_4 = an_7, ~M_5 = mac(enc_key(sak_4,kdf(szk_5,kek_context_5)),an_7,kdf(szk_5,ick_context_5)) at {19} in copy a_1

in(key_packet, (~M,~M_1,~M_2)) with ~M = enc_key(sak_3,kdf(szk_5,kek_context_5)), ~M_1 = an_7, ~M_2 = mac(enc_key(sak_3,kdf(szk_5,kek_context_5)),an_7,kdf(szk_5,ick_context_5)) at {26} in copy a_2

out(association_key, (~M_6,~M_7,~M_8)) with ~M_6 = an_7, ~M_7 = sci_A_4, ~M_8 = dec_key(enc_key(sak_3,kdf(szk_5,kek_context_5)),szk_5) at {31} in copy a_2

new packet_number2: number creating packet_number2_2 at {32} in copy a_2

in(scA, (~M_7,a_3,a_4,enc(a_5,a_6),hmac(enc(a_5,a_6),a_3,a_4,a_6))) with ~M_7 = sci_A_4 at {60} in copy a_7

in(association_key, (a_3,a_8,a_6)) at {61} in copy a_7

get freshness(=sci_A_4,=a_3,fv: number) suchthat (fv = a_4): else branch taken at {67} in copy a_7

insert freshness(sci_A_4,a_3,a_4) at {65} in copy a_7

event message_received_Bob(dec(enc(a_5,a_6),a_6),a_4) at {66} in copy a_7 (goal)

The event message_received_Bob(a_5,a_4) is executed at {66} in copy a_7.
A trace has been found.
RESULT inj-event(message_received_Bob(m_2,packet_number_2)) ==> inj-event(message_send_Alice(m_2,packet_number_2)) is false.
RESULT (even event(message_received_Bob(m_2,packet_number_2)) ==> event(message_send_Alice(m_2,packet_number_2)) is false.)

--------------------------------------------------------------
Verification summary:

Query not (event(message_received_Bob(m_2,packet_number_2)) && attacker_p1(m_2)) is false.

Query inj-event(message_received_Bob(m_2,packet_number_2)) ==> inj-event(message_send_Alice(m_2,packet_number_2)) is false.

--------------------------------------------------------------

