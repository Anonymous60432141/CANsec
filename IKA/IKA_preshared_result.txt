Linear part: No equation.
Convergent part:
dec(enc(m,k),k) = m
enc(dec(m,k),k) = m
retrive_xpn(xpn(m,k),k) = m
Completing equations...
Completed equations:
retrive_xpn(xpn(m,k),k) = m
enc(dec(m,k),k) = m
dec(enc(m,k),k) = m
Process 0 (that is, the initial process):
{1}new szk: key;
{2}out(scA, szk);
{3}new sci_A: bitstring;
{4}new msg: bitstring;
{5}new kc: number;
{6}new packet_number: number;
{7}out(key_counter, (kc,sci_A,szk));
{8}insert freshness(sci_A,kc,packet_number);
(
    {9}!
    {10}let m: bitstring = msg in
    {11}let sci_A_1: bitstring = sci_A in
    {12}let szk_1: key = szk in
    {13}new kc_1: number;
    {14}let sak_alice: key = kdf(szk_1,kc_1) in
    {15}new randomness: bitstring;
    {16}new packet_number1: number;
    {17}let icv: bitstring = hmac(enc(randomness,sak_alice),kc_1,packet_number1,sak_alice) in
    {18}out(scA, (sci_A_1,xpn(kc_1,sak_alice),1,enc(randomness,sak_alice),icv));
    {19}new packet_number2: number;
    {20}let msg_1: bitstring = enc(m,sak_alice) in
    {21}let icv2: bitstring = hmac(msg_1,kc_1,packet_number2,sak_alice) in
    {22}event message_send_Alice(m,packet_number2);
    {23}out(scA, (sci_A_1,xpn(kc_1,szk_1),packet_number2,msg_1,icv2))
) | (
    {24}!
    {25}let sci_A_2: bitstring = sci_A in
    {26}let szk_2: key = szk in
    {27}in(scA, (sci: bitstring,pkc: bitstring,packet_number_1: number,x: bitstring,icv_1: bitstring));
    {28}in(key_counter, (curr_kc: number,sci_Alice: bitstring,ska_A: key));
    {29}let kc_2: number = retrive_xpn(pkc,szk_2) in
    {30}if (kc_2 = curr_kc) then
    (
        {35}get freshness(=sci,=kc_2,fv: number) suchthat (fv = packet_number_1) in
            0
        else
            {31}if ((sci = sci_A_2) && (icv_1 = hmac(x,kc_2,packet_number_1,ska_A))) then
            {32}let received_msg: bitstring = dec(x,ska_A) in
            {33}insert freshness(sci_A_2,kc_2,packet_number_1);
            {34}event message_received_Bob(received_msg,packet_number_1)
    )
    else
        {36}let n_key: key = kdf(szk_2,kc_2) in
        {37}if ((sci = sci_A_2) && (icv_1 = hmac(x,kc_2,packet_number_1,n_key))) then
        {38}insert freshness(sci_A_2,kc_2,packet_number_1);
        {39}out(key_counter, (sci,kc_2,n_key))
) | (
    {40}phase 1;
    {41}insert revoke_keys(kdf(szk,kc),sci_A);
    {42}new new_msg: bitstring;
    {43}new new_sci_A: bitstring;
    (
        {44}!
        {45}let m_1: bitstring = new_msg in
        {46}let sci_A_3: bitstring = new_sci_A in
        {47}let szk_3: key = szk in
        {48}new kc_3: number;
        {49}let sak_alice_1: key = kdf(szk_3,kc_3) in
        {50}new randomness_1: bitstring;
        {51}new packet_number1_1: number;
        {52}let icv_2: bitstring = hmac(enc(randomness_1,sak_alice_1),kc_3,packet_number1_1,sak_alice_1) in
        {53}out(scA, (sci_A_3,xpn(kc_3,sak_alice_1),1,enc(randomness_1,sak_alice_1),icv_2));
        {54}new packet_number2_1: number;
        {55}let msg_2: bitstring = enc(m_1,sak_alice_1) in
        {56}let icv2_1: bitstring = hmac(msg_2,kc_3,packet_number2_1,sak_alice_1) in
        {57}event message_send_Alice(m_1,packet_number2_1);
        {58}out(scA, (sci_A_3,xpn(kc_3,szk_3),packet_number2_1,msg_2,icv2_1))
    ) | (
        {59}!
        {60}let sci_A_4: bitstring = new_sci_A in
        {61}let szk_4: key = szk in
        {62}in(scA, (sci_1: bitstring,pkc_1: bitstring,packet_number_2: number,x_1: bitstring,icv_3: bitstring));
        {63}in(key_counter, (curr_kc_1: number,sci_Alice_1: bitstring,ska_A_1: key));
        {64}let kc_4: number = retrive_xpn(pkc_1,szk_4) in
        {65}if (kc_4 = curr_kc_1) then
        (
            {70}get freshness(=sci_1,=kc_4,fv_1: number) suchthat (fv_1 = packet_number_2) in
                0
            else
                {66}if ((sci_1 = sci_A_4) && (icv_3 = hmac(x_1,kc_4,packet_number_2,ska_A_1))) then
                {67}let received_msg_1: bitstring = dec(x_1,ska_A_1) in
                {68}insert freshness(sci_A_4,kc_4,packet_number_2);
                {69}event message_received_Bob(received_msg_1,packet_number_2)
        )
        else
            {71}let n_key_1: key = kdf(szk_4,kc_4) in
            {72}if ((sci_1 = sci_A_4) && (icv_3 = hmac(x_1,kc_4,packet_number_2,n_key_1))) then
            {73}insert freshness(sci_A_4,kc_4,packet_number_2);
            {74}out(key_counter, (sci_1,kc_4,n_key_1))
    )
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}new szk: key;
{2}out(scA, szk);
{3}new sci_A: bitstring;
{4}new msg: bitstring;
{5}new kc: number;
{6}new packet_number: number;
{7}out(key_counter, (kc,sci_A,szk));
{8}insert freshness(sci_A,kc,packet_number);
(
    {9}!
    {13}new kc_1: number;
    {15}new randomness: bitstring;
    {16}new packet_number1: number;
    {12}let szk_1: key = szk in
    {14}let sak_alice: key = kdf(szk_1,kc_1) in
    {17}let icv: bitstring = hmac(enc(randomness,sak_alice),kc_1,packet_number1,sak_alice) in
    {11}let sci_A_1: bitstring = sci_A in
    {18}out(scA, (sci_A_1,xpn(kc_1,sak_alice),1,enc(randomness,sak_alice),icv));
    {19}new packet_number2: number;
    {10}let m: bitstring = msg in
    {22}event message_send_Alice(m,packet_number2);
    {20}let msg_1: bitstring = enc(m,sak_alice) in
    {21}let icv2: bitstring = hmac(msg_1,kc_1,packet_number2,sak_alice) in
    {23}out(scA, (sci_A_1,xpn(kc_1,szk_1),packet_number2,msg_1,icv2))
) | (
    {24}!
    {27}in(scA, (sci: bitstring,pkc: bitstring,packet_number_1: number,x: bitstring,icv_1: bitstring));
    {28}in(key_counter, (curr_kc: number,sci_Alice: bitstring,ska_A: key));
    {26}let szk_2: key = szk in
    {29}let kc_2: number = retrive_xpn(pkc,szk_2) in
    {25}let sci_A_2: bitstring = sci_A in
    {30}if (kc_2 = curr_kc) then
    (
        {35}get freshness(=sci,=kc_2,fv: number) suchthat (fv = packet_number_1) in
            0
        else
            {31}if ((sci = sci_A_2) && (icv_1 = hmac(x,kc_2,packet_number_1,ska_A))) then
            {33}insert freshness(sci_A_2,kc_2,packet_number_1);
            {32}let received_msg: bitstring = dec(x,ska_A) in
            {34}event message_received_Bob(received_msg,packet_number_1)
    )
    else
        {36}let n_key: key = kdf(szk_2,kc_2) in
        {37}if ((sci = sci_A_2) && (icv_1 = hmac(x,kc_2,packet_number_1,n_key))) then
        {38}insert freshness(sci_A_2,kc_2,packet_number_1);
        {39}out(key_counter, (sci,kc_2,n_key))
) | (
    {40}phase 1;
    {41}insert revoke_keys(kdf(szk,kc),sci_A);
    {42}new new_msg: bitstring;
    {43}new new_sci_A: bitstring;
    (
        {44}!
        {48}new kc_3: number;
        {50}new randomness_1: bitstring;
        {51}new packet_number1_1: number;
        {47}let szk_3: key = szk in
        {49}let sak_alice_1: key = kdf(szk_3,kc_3) in
        {52}let icv_2: bitstring = hmac(enc(randomness_1,sak_alice_1),kc_3,packet_number1_1,sak_alice_1) in
        {46}let sci_A_3: bitstring = new_sci_A in
        {53}out(scA, (sci_A_3,xpn(kc_3,sak_alice_1),1,enc(randomness_1,sak_alice_1),icv_2));
        {54}new packet_number2_1: number;
        {45}let m_1: bitstring = new_msg in
        {57}event message_send_Alice(m_1,packet_number2_1);
        {55}let msg_2: bitstring = enc(m_1,sak_alice_1) in
        {56}let icv2_1: bitstring = hmac(msg_2,kc_3,packet_number2_1,sak_alice_1) in
        {58}out(scA, (sci_A_3,xpn(kc_3,szk_3),packet_number2_1,msg_2,icv2_1))
    ) | (
        {59}!
        {62}in(scA, (sci_1: bitstring,pkc_1: bitstring,packet_number_2: number,x_1: bitstring,icv_3: bitstring));
        {63}in(key_counter, (curr_kc_1: number,sci_Alice_1: bitstring,ska_A_1: key));
        {61}let szk_4: key = szk in
        {64}let kc_4: number = retrive_xpn(pkc_1,szk_4) in
        {60}let sci_A_4: bitstring = new_sci_A in
        {65}if (kc_4 = curr_kc_1) then
        (
            {70}get freshness(=sci_1,=kc_4,fv_1: number) suchthat (fv_1 = packet_number_2) in
                0
            else
                {66}if ((sci_1 = sci_A_4) && (icv_3 = hmac(x_1,kc_4,packet_number_2,ska_A_1))) then
                {68}insert freshness(sci_A_4,kc_4,packet_number_2);
                {67}let received_msg_1: bitstring = dec(x_1,ska_A_1) in
                {69}event message_received_Bob(received_msg_1,packet_number_2)
        )
        else
            {71}let n_key_1: key = kdf(szk_4,kc_4) in
            {72}if ((sci_1 = sci_A_4) && (icv_3 = hmac(x_1,kc_4,packet_number_2,n_key_1))) then
            {73}insert freshness(sci_A_4,kc_4,packet_number_2);
            {74}out(key_counter, (sci_1,kc_4,n_key_1))
    )
)

-- Query not (event(message_received_Bob(m_2,packet_number_3)) && attacker_p1(m_2)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 157 rules (54 with conclusion selected). Queue: 70 rules.
Termination warning: Selecting an hypothesis matching the conclusion.
In case of non-termination, try a noselect declaration implying the following one:
   noselect ska_A_2:key, sci_Alice_2:bitstring, curr_kc_2:number; mess(key_counter[],(curr_kc_2,*sci_Alice_2,ska_A_2)).
Termination warning: Selecting an hypothesis matching the conclusion.
In case of non-termination, try a noselect declaration implying the following one:
   noselect ska_A_2:key, sci_Alice_2:bitstring, curr_kc_2:number; mess_p1(key_counter[],(curr_kc_2,sci_Alice_2,ska_A_2)).
Termination warning: Selecting an hypothesis matching the conclusion.
In case of non-termination, try a noselect declaration implying the following one:
   noselect ska_A_2:key, sci_Alice_2:bitstring, curr_kc_2:number; mess_p1(key_counter[],(curr_kc_2,*sci_Alice_2,ska_A_2)).
400 rules inserted. Base: 216 rules (63 with conclusion selected). Queue: 18 rules.
Starting query not (event(message_received_Bob(m_2,packet_number_3)) && attacker_p1(m_2))
goal reachable: attacker(m_2) && attacker(packet_number_3) && attacker_p1(m_2) -> event(message_received_Bob(m_2,packet_number_3)) && attacker_p1(m_2)

Derivation:
Abbreviations:
kc_5 = kc_1[!1 = @sid]
randomness_2 = randomness[!1 = @sid]
packet_number1_2 = packet_number1[!1 = @sid]

1. We assume as hypothesis that
attacker_p1(m_2).

2. The attacker has some term sci_Alice_2.
attacker(sci_Alice_2).

3. The message szk[] may be sent to the attacker at output {2}.
attacker(szk[]).

4. By 3, the attacker may know szk[].
By 2, the attacker may know sci_Alice_2.
Using the function kdf the attacker may obtain kdf(szk[],sci_Alice_2).
attacker(kdf(szk[],sci_Alice_2)).

5. We assume as hypothesis that
attacker(packet_number_3).

6. The message (sci_A[],xpn(kc_5,kdf(szk[],kc_5)),1,enc(randomness_2,kdf(szk[],kc_5)),hmac(enc(randomness_2,kdf(szk[],kc_5)),kc_5,packet_number1_2,kdf(szk[],kc_5))) may be sent to the attacker at output {18}.
attacker((sci_A[],xpn(kc_5,kdf(szk[],kc_5)),1,enc(randomness_2,kdf(szk[],kc_5)),hmac(enc(randomness_2,kdf(szk[],kc_5)),kc_5,packet_number1_2,kdf(szk[],kc_5)))).

7. By 6, the attacker may know (sci_A[],xpn(kc_5,kdf(szk[],kc_5)),1,enc(randomness_2,kdf(szk[],kc_5)),hmac(enc(randomness_2,kdf(szk[],kc_5)),kc_5,packet_number1_2,kdf(szk[],kc_5))).
Using the function 1-proj-5-tuple the attacker may obtain sci_A[].
attacker(sci_A[]).

8. We assume as hypothesis that
attacker(m_2).

9. By 8, the attacker may know m_2.
By 4, the attacker may know kdf(szk[],sci_Alice_2).
Using the function enc the attacker may obtain enc(m_2,kdf(szk[],sci_Alice_2)).
attacker(enc(m_2,kdf(szk[],sci_Alice_2))).

10. By 9, the attacker may know enc(m_2,kdf(szk[],sci_Alice_2)).
By 7, the attacker may know sci_A[].
By 5, the attacker may know packet_number_3.
By 4, the attacker may know kdf(szk[],sci_Alice_2).
Using the function hmac the attacker may obtain hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2)).
attacker(hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2))).

11. By 7, the attacker may know sci_A[].
By 3, the attacker may know szk[].
Using the function xpn the attacker may obtain xpn(sci_A[],szk[]).
attacker(xpn(sci_A[],szk[])).

12. By 7, the attacker may know sci_A[].
By 11, the attacker may know xpn(sci_A[],szk[]).
By 5, the attacker may know packet_number_3.
By 9, the attacker may know enc(m_2,kdf(szk[],sci_Alice_2)).
By 10, the attacker may know hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2)).
Using the function 5-tuple the attacker may obtain (sci_A[],xpn(sci_A[],szk[]),packet_number_3,enc(m_2,kdf(szk[],sci_Alice_2)),hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2))).
attacker((sci_A[],xpn(sci_A[],szk[]),packet_number_3,enc(m_2,kdf(szk[],sci_Alice_2)),hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2)))).

13. The attacker has some term packet_number_4.
attacker(packet_number_4).

14. The attacker has some term x_2.
attacker(x_2).

15. By 14, the attacker may know x_2.
By 2, the attacker may know sci_Alice_2.
By 13, the attacker may know packet_number_4.
By 4, the attacker may know kdf(szk[],sci_Alice_2).
Using the function hmac the attacker may obtain hmac(x_2,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2)).
attacker(hmac(x_2,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2))).

16. By 2, the attacker may know sci_Alice_2.
By 3, the attacker may know szk[].
Using the function xpn the attacker may obtain xpn(sci_Alice_2,szk[]).
attacker(xpn(sci_Alice_2,szk[])).

17. By 7, the attacker may know sci_A[].
By 16, the attacker may know xpn(sci_Alice_2,szk[]).
By 13, the attacker may know packet_number_4.
By 14, the attacker may know x_2.
By 15, the attacker may know hmac(x_2,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2)).
Using the function 5-tuple the attacker may obtain (sci_A[],xpn(sci_Alice_2,szk[]),packet_number_4,x_2,hmac(x_2,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2))).
attacker((sci_A[],xpn(sci_Alice_2,szk[]),packet_number_4,x_2,hmac(x_2,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2)))).

18. The message (kc[],sci_A[],szk[]) may be sent on channel key_counter[] at output {7}.
mess(key_counter[],(kc[],sci_A[],szk[])).

19. The message (sci_A[],xpn(sci_Alice_2,szk[]),packet_number_4,x_2,hmac(x_2,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2))) that the attacker may have by 17 may be received at input {27}.
The message (kc[],sci_A[],szk[]) that may be sent on channel key_counter[] by 18 may be received at input {28}.
We have sci_Alice_2 ≠ kc[].
So the message (sci_A[],sci_Alice_2,kdf(szk[],sci_Alice_2)) may be sent on channel key_counter[] at output {39}.
mess(key_counter[],(sci_A[],sci_Alice_2,kdf(szk[],sci_Alice_2))).

20. The message (sci_A[],xpn(sci_A[],szk[]),packet_number_3,enc(m_2,kdf(szk[],sci_Alice_2)),hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2))) that the attacker may have by 12 may be received at input {27}.
The message (sci_A[],sci_Alice_2,kdf(szk[],sci_Alice_2)) that may be sent on channel key_counter[] by 19 may be received at input {28}.
So event message_received_Bob(m_2,packet_number_3) may be executed at {34}.
event(message_received_Bob(m_2,packet_number_3)).

21. By 20, event(message_received_Bob(m_2,packet_number_3)).
By 1, attacker_p1(m_2).
The goals are reached, combined in the following fact:
event(message_received_Bob(m_2,packet_number_3)) && attacker_p1(m_2).


Could not find a trace corresponding to this derivation.
RESULT not (event(message_received_Bob(m_2,packet_number_3)) && attacker_p1(m_2)) cannot be proved.
-- Query inj-event(message_received_Bob(m_2,packet_number_3)) ==> inj-event(message_send_Alice(m_2,packet_number_3)) in process 1.
Translating the process into Horn clauses...
Completing...
200 rules inserted. Base: 165 rules (54 with conclusion selected). Queue: 75 rules.
Termination warning: Selecting an hypothesis matching the conclusion.
In case of non-termination, try a noselect declaration implying the following one:
   noselect ska_A_2:key, sci_Alice_2:bitstring, curr_kc_2:number; mess(key_counter[],(curr_kc_2,*sci_Alice_2,ska_A_2)).
Termination warning: Selecting an hypothesis matching the conclusion.
In case of non-termination, try a noselect declaration implying the following one:
   noselect ska_A_2:key, sci_Alice_2:bitstring, curr_kc_2:number; mess_p1(key_counter[],(curr_kc_2,sci_Alice_2,ska_A_2)).
400 rules inserted. Base: 251 rules (60 with conclusion selected). Queue: 21 rules.
Termination warning: Selecting an hypothesis matching the conclusion.
In case of non-termination, try a noselect declaration implying the following one:
   noselect ska_A_2:key, sci_Alice_2:bitstring, curr_kc_2:number; mess_p1(key_counter[],(curr_kc_2,*sci_Alice_2,ska_A_2)).
Starting query inj-event(message_received_Bob(m_2,packet_number_3)) ==> inj-event(message_send_Alice(m_2,packet_number_3))
goal reachable: sci_Alice_2 ≠ kc[] && attacker(m_2) && attacker(packet_number_3) && attacker(sci_Alice_2) -> inj-event(message_received_Bob(m_2,packet_number_3),@occ34_1)
Abbreviations:
@occ34_1 = @occ34[ska_A = kdf(szk[],sci_Alice_2),sci_Alice = sci_Alice_2,curr_kc = sci_A[],icv_1 = hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2)),x = enc(m_2,kdf(szk[],sci_Alice_2)),packet_number_1 = packet_number_3,pkc = xpn(sci_A[],szk[]),sci = sci_A[],!1 = @sid]

Derivation:
Abbreviations:
@occ34_1 = @occ34[ska_A = kdf(szk[],sci_Alice_2),sci_Alice = sci_Alice_2,curr_kc = sci_A[],icv_1 = hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2)),x = enc(m_2,kdf(szk[],sci_Alice_2)),packet_number_1 = packet_number_3,pkc = xpn(sci_A[],szk[]),sci = sci_A[],!1 = @sid]
kc_5 = kc_1[!1 = @sid_1]
randomness_2 = randomness[!1 = @sid_1]
packet_number1_2 = packet_number1[!1 = @sid_1]

1. We assume as hypothesis that
attacker(sci_Alice_2).

2. The message szk[] may be sent to the attacker at output {2}.
attacker(szk[]).

3. By 2, the attacker may know szk[].
By 1, the attacker may know sci_Alice_2.
Using the function kdf the attacker may obtain kdf(szk[],sci_Alice_2).
attacker(kdf(szk[],sci_Alice_2)).

4. We assume as hypothesis that
attacker(packet_number_3).

5. The message (sci_A[],xpn(kc_5,kdf(szk[],kc_5)),1,enc(randomness_2,kdf(szk[],kc_5)),hmac(enc(randomness_2,kdf(szk[],kc_5)),kc_5,packet_number1_2,kdf(szk[],kc_5))) may be sent to the attacker at output {18}.
attacker((sci_A[],xpn(kc_5,kdf(szk[],kc_5)),1,enc(randomness_2,kdf(szk[],kc_5)),hmac(enc(randomness_2,kdf(szk[],kc_5)),kc_5,packet_number1_2,kdf(szk[],kc_5)))).

6. By 5, the attacker may know (sci_A[],xpn(kc_5,kdf(szk[],kc_5)),1,enc(randomness_2,kdf(szk[],kc_5)),hmac(enc(randomness_2,kdf(szk[],kc_5)),kc_5,packet_number1_2,kdf(szk[],kc_5))).
Using the function 1-proj-5-tuple the attacker may obtain sci_A[].
attacker(sci_A[]).

7. We assume as hypothesis that
attacker(m_2).

8. By 7, the attacker may know m_2.
By 3, the attacker may know kdf(szk[],sci_Alice_2).
Using the function enc the attacker may obtain enc(m_2,kdf(szk[],sci_Alice_2)).
attacker(enc(m_2,kdf(szk[],sci_Alice_2))).

9. By 8, the attacker may know enc(m_2,kdf(szk[],sci_Alice_2)).
By 6, the attacker may know sci_A[].
By 4, the attacker may know packet_number_3.
By 3, the attacker may know kdf(szk[],sci_Alice_2).
Using the function hmac the attacker may obtain hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2)).
attacker(hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2))).

10. By 6, the attacker may know sci_A[].
By 2, the attacker may know szk[].
Using the function xpn the attacker may obtain xpn(sci_A[],szk[]).
attacker(xpn(sci_A[],szk[])).

11. By 6, the attacker may know sci_A[].
By 10, the attacker may know xpn(sci_A[],szk[]).
By 4, the attacker may know packet_number_3.
By 8, the attacker may know enc(m_2,kdf(szk[],sci_Alice_2)).
By 9, the attacker may know hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2)).
Using the function 5-tuple the attacker may obtain (sci_A[],xpn(sci_A[],szk[]),packet_number_3,enc(m_2,kdf(szk[],sci_Alice_2)),hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2))).
attacker((sci_A[],xpn(sci_A[],szk[]),packet_number_3,enc(m_2,kdf(szk[],sci_Alice_2)),hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2)))).

12. The attacker has some term packet_number_4.
attacker(packet_number_4).

13. The attacker has some term x_2.
attacker(x_2).

14. By 13, the attacker may know x_2.
By 1, the attacker may know sci_Alice_2.
By 12, the attacker may know packet_number_4.
By 3, the attacker may know kdf(szk[],sci_Alice_2).
Using the function hmac the attacker may obtain hmac(x_2,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2)).
attacker(hmac(x_2,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2))).

15. By 1, the attacker may know sci_Alice_2.
By 2, the attacker may know szk[].
Using the function xpn the attacker may obtain xpn(sci_Alice_2,szk[]).
attacker(xpn(sci_Alice_2,szk[])).

16. By 6, the attacker may know sci_A[].
By 15, the attacker may know xpn(sci_Alice_2,szk[]).
By 12, the attacker may know packet_number_4.
By 13, the attacker may know x_2.
By 14, the attacker may know hmac(x_2,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2)).
Using the function 5-tuple the attacker may obtain (sci_A[],xpn(sci_Alice_2,szk[]),packet_number_4,x_2,hmac(x_2,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2))).
attacker((sci_A[],xpn(sci_Alice_2,szk[]),packet_number_4,x_2,hmac(x_2,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2)))).

17. The message (kc[],sci_A[],szk[]) may be sent on channel key_counter[] at output {7}.
mess(key_counter[],(kc[],sci_A[],szk[])).

18. The message (sci_A[],xpn(sci_Alice_2,szk[]),packet_number_4,x_2,hmac(x_2,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2))) that the attacker may have by 16 may be received at input {27}.
The message (kc[],sci_A[],szk[]) that may be sent on channel key_counter[] by 17 may be received at input {28}.
We have sci_Alice_2 ≠ kc[].
So the message (sci_A[],sci_Alice_2,kdf(szk[],sci_Alice_2)) may be sent on channel key_counter[] at output {39}.
mess(key_counter[],(sci_A[],sci_Alice_2,kdf(szk[],sci_Alice_2))).

19. The message (sci_A[],xpn(sci_A[],szk[]),packet_number_3,enc(m_2,kdf(szk[],sci_Alice_2)),hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2))) that the attacker may have by 11 may be received at input {27}.
The message (sci_A[],sci_Alice_2,kdf(szk[],sci_Alice_2)) that may be sent on channel key_counter[] by 18 may be received at input {28}.
So event message_received_Bob(m_2,packet_number_3) may be executed at {34} in session @sid.
inj-event(message_received_Bob(m_2,packet_number_3),@occ34_1).

20. By 19, inj-event(message_received_Bob(m_2,packet_number_3),@occ34_1).
The goal is reached, represented in the following fact:
inj-event(message_received_Bob(m_2,packet_number_3),@occ34_1).


Could not find a trace corresponding to this derivation.
goal reachable: sci_Alice_2 ≠ sci_A[] && attacker(m_2) && attacker(packet_number_3) && attacker(sci_Alice_2) -> inj-event(message_received_Bob(m_2,packet_number_3),@occ34_1)
Abbreviations:
@occ34_1 = @occ34[ska_A = kdf(szk[],sci_Alice_2),sci_Alice = sci_Alice_2,curr_kc = sci_A[],icv_1 = hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2)),x = enc(m_2,kdf(szk[],sci_Alice_2)),packet_number_1 = packet_number_3,pkc = xpn(sci_A[],szk[]),sci = sci_A[],!1 = @sid]

Derivation:
Abbreviations:
@occ34_1 = @occ34[ska_A = kdf(szk[],sci_Alice_2),sci_Alice = sci_Alice_2,curr_kc = sci_A[],icv_1 = hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2)),x = enc(m_2,kdf(szk[],sci_Alice_2)),packet_number_1 = packet_number_3,pkc = xpn(sci_A[],szk[]),sci = sci_A[],!1 = @sid]
kc_5 = kc_1[!1 = @sid_1]
randomness_2 = randomness[!1 = @sid_1]
packet_number1_2 = packet_number1[!1 = @sid_1]

1. We assume as hypothesis that
attacker(sci_Alice_2).

2. The message szk[] may be sent to the attacker at output {2}.
attacker(szk[]).

3. By 2, the attacker may know szk[].
By 1, the attacker may know sci_Alice_2.
Using the function kdf the attacker may obtain kdf(szk[],sci_Alice_2).
attacker(kdf(szk[],sci_Alice_2)).

4. We assume as hypothesis that
attacker(packet_number_3).

5. The message (sci_A[],xpn(kc_5,kdf(szk[],kc_5)),1,enc(randomness_2,kdf(szk[],kc_5)),hmac(enc(randomness_2,kdf(szk[],kc_5)),kc_5,packet_number1_2,kdf(szk[],kc_5))) may be sent to the attacker at output {18}.
attacker((sci_A[],xpn(kc_5,kdf(szk[],kc_5)),1,enc(randomness_2,kdf(szk[],kc_5)),hmac(enc(randomness_2,kdf(szk[],kc_5)),kc_5,packet_number1_2,kdf(szk[],kc_5)))).

6. By 5, the attacker may know (sci_A[],xpn(kc_5,kdf(szk[],kc_5)),1,enc(randomness_2,kdf(szk[],kc_5)),hmac(enc(randomness_2,kdf(szk[],kc_5)),kc_5,packet_number1_2,kdf(szk[],kc_5))).
Using the function 1-proj-5-tuple the attacker may obtain sci_A[].
attacker(sci_A[]).

7. We assume as hypothesis that
attacker(m_2).

8. By 7, the attacker may know m_2.
By 3, the attacker may know kdf(szk[],sci_Alice_2).
Using the function enc the attacker may obtain enc(m_2,kdf(szk[],sci_Alice_2)).
attacker(enc(m_2,kdf(szk[],sci_Alice_2))).

9. By 8, the attacker may know enc(m_2,kdf(szk[],sci_Alice_2)).
By 6, the attacker may know sci_A[].
By 4, the attacker may know packet_number_3.
By 3, the attacker may know kdf(szk[],sci_Alice_2).
Using the function hmac the attacker may obtain hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2)).
attacker(hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2))).

10. By 6, the attacker may know sci_A[].
By 2, the attacker may know szk[].
Using the function xpn the attacker may obtain xpn(sci_A[],szk[]).
attacker(xpn(sci_A[],szk[])).

11. By 6, the attacker may know sci_A[].
By 10, the attacker may know xpn(sci_A[],szk[]).
By 4, the attacker may know packet_number_3.
By 8, the attacker may know enc(m_2,kdf(szk[],sci_Alice_2)).
By 9, the attacker may know hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2)).
Using the function 5-tuple the attacker may obtain (sci_A[],xpn(sci_A[],szk[]),packet_number_3,enc(m_2,kdf(szk[],sci_Alice_2)),hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2))).
attacker((sci_A[],xpn(sci_A[],szk[]),packet_number_3,enc(m_2,kdf(szk[],sci_Alice_2)),hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2)))).

12. The attacker has some term packet_number_4.
attacker(packet_number_4).

13. The attacker has some term x_2.
attacker(x_2).

14. By 13, the attacker may know x_2.
By 1, the attacker may know sci_Alice_2.
By 12, the attacker may know packet_number_4.
By 3, the attacker may know kdf(szk[],sci_Alice_2).
Using the function hmac the attacker may obtain hmac(x_2,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2)).
attacker(hmac(x_2,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2))).

15. By 1, the attacker may know sci_Alice_2.
By 2, the attacker may know szk[].
Using the function xpn the attacker may obtain xpn(sci_Alice_2,szk[]).
attacker(xpn(sci_Alice_2,szk[])).

16. By 6, the attacker may know sci_A[].
By 15, the attacker may know xpn(sci_Alice_2,szk[]).
By 12, the attacker may know packet_number_4.
By 13, the attacker may know x_2.
By 14, the attacker may know hmac(x_2,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2)).
Using the function 5-tuple the attacker may obtain (sci_A[],xpn(sci_Alice_2,szk[]),packet_number_4,x_2,hmac(x_2,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2))).
attacker((sci_A[],xpn(sci_Alice_2,szk[]),packet_number_4,x_2,hmac(x_2,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2)))).

17. The attacker has some term sci_Alice_3.
attacker(sci_Alice_3).

18. By 2, the attacker may know szk[].
By 17, the attacker may know sci_Alice_3.
Using the function kdf the attacker may obtain kdf(szk[],sci_Alice_3).
attacker(kdf(szk[],sci_Alice_3)).

19. The attacker has some term packet_number_5.
attacker(packet_number_5).

20. The attacker has some term x_3.
attacker(x_3).

21. By 20, the attacker may know x_3.
By 17, the attacker may know sci_Alice_3.
By 19, the attacker may know packet_number_5.
By 18, the attacker may know kdf(szk[],sci_Alice_3).
Using the function hmac the attacker may obtain hmac(x_3,sci_Alice_3,packet_number_5,kdf(szk[],sci_Alice_3)).
attacker(hmac(x_3,sci_Alice_3,packet_number_5,kdf(szk[],sci_Alice_3))).

22. By 17, the attacker may know sci_Alice_3.
By 2, the attacker may know szk[].
Using the function xpn the attacker may obtain xpn(sci_Alice_3,szk[]).
attacker(xpn(sci_Alice_3,szk[])).

23. By 6, the attacker may know sci_A[].
By 22, the attacker may know xpn(sci_Alice_3,szk[]).
By 19, the attacker may know packet_number_5.
By 20, the attacker may know x_3.
By 21, the attacker may know hmac(x_3,sci_Alice_3,packet_number_5,kdf(szk[],sci_Alice_3)).
Using the function 5-tuple the attacker may obtain (sci_A[],xpn(sci_Alice_3,szk[]),packet_number_5,x_3,hmac(x_3,sci_Alice_3,packet_number_5,kdf(szk[],sci_Alice_3))).
attacker((sci_A[],xpn(sci_Alice_3,szk[]),packet_number_5,x_3,hmac(x_3,sci_Alice_3,packet_number_5,kdf(szk[],sci_Alice_3)))).

24. The message (kc[],sci_A[],szk[]) may be sent on channel key_counter[] at output {7}.
mess(key_counter[],(kc[],sci_A[],szk[])).

25. The message (sci_A[],xpn(sci_Alice_3,szk[]),packet_number_5,x_3,hmac(x_3,sci_Alice_3,packet_number_5,kdf(szk[],sci_Alice_3))) that the attacker may have by 23 may be received at input {27}.
The message (kc[],sci_A[],szk[]) that may be sent on channel key_counter[] by 24 may be received at input {28}.
We have sci_Alice_3 ≠ kc[].
So the message (sci_A[],sci_Alice_3,kdf(szk[],sci_Alice_3)) may be sent on channel key_counter[] at output {39}.
mess(key_counter[],(sci_A[],sci_Alice_3,kdf(szk[],sci_Alice_3))).

26. The message (sci_A[],xpn(sci_Alice_2,szk[]),packet_number_4,x_2,hmac(x_2,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2))) that the attacker may have by 16 may be received at input {27}.
The message (sci_A[],sci_Alice_3,kdf(szk[],sci_Alice_3)) that may be sent on channel key_counter[] by 25 may be received at input {28}.
We have sci_Alice_2 ≠ sci_A[].
So the message (sci_A[],sci_Alice_2,kdf(szk[],sci_Alice_2)) may be sent on channel key_counter[] at output {39}.
mess(key_counter[],(sci_A[],sci_Alice_2,kdf(szk[],sci_Alice_2))).

27. The message (sci_A[],xpn(sci_A[],szk[]),packet_number_3,enc(m_2,kdf(szk[],sci_Alice_2)),hmac(enc(m_2,kdf(szk[],sci_Alice_2)),sci_A[],packet_number_3,kdf(szk[],sci_Alice_2))) that the attacker may have by 11 may be received at input {27}.
The message (sci_A[],sci_Alice_2,kdf(szk[],sci_Alice_2)) that may be sent on channel key_counter[] by 26 may be received at input {28}.
So event message_received_Bob(m_2,packet_number_3) may be executed at {34} in session @sid.
inj-event(message_received_Bob(m_2,packet_number_3),@occ34_1).

28. By 27, inj-event(message_received_Bob(m_2,packet_number_3),@occ34_1).
The goal is reached, represented in the following fact:
inj-event(message_received_Bob(m_2,packet_number_3),@occ34_1).


Could not find a trace corresponding to this derivation.
goal reachable: attacker(packet_number_3) && b-inj-event(message_send_Alice(msg[],packet_number2_2),@occ22_1) -> inj-event(message_received_Bob(msg[],packet_number_3),@occ34_1)
Abbreviations:
kc_5 = kc_1[!1 = @sid]
@occ34_1 = @occ34[ska_A = kdf(szk[],kc_5),sci_Alice = kc_5,curr_kc = sci_A[],icv_1 = hmac(enc(msg[],kdf(szk[],kc_5)),sci_A[],packet_number_3,kdf(szk[],kc_5)),x = enc(msg[],kdf(szk[],kc_5)),packet_number_1 = packet_number_3,pkc = xpn(sci_A[],szk[]),sci = sci_A[],!1 = @sid_1]
packet_number2_2 = packet_number2[!1 = @sid]
@occ22_1 = @occ22[!1 = @sid]

Derivation:
Abbreviations:
kc_5 = kc_1[!1 = @sid]
@occ34_1 = @occ34[ska_A = kdf(szk[],kc_5),sci_Alice = kc_5,curr_kc = sci_A[],icv_1 = hmac(enc(msg[],kdf(szk[],kc_5)),sci_A[],packet_number_3,kdf(szk[],kc_5)),x = enc(msg[],kdf(szk[],kc_5)),packet_number_1 = packet_number_3,pkc = xpn(sci_A[],szk[]),sci = sci_A[],!1 = @sid_1]
packet_number2_2 = packet_number2[!1 = @sid]
kc_6 = kc_1[!1 = @sid_2]
randomness_2 = randomness[!1 = @sid_2]
packet_number1_2 = packet_number1[!1 = @sid_2]
@occ22_1 = @occ22[!1 = @sid]

1. The message szk[] may be sent to the attacker at output {2}.
attacker(szk[]).

2. The event message_send_Alice(msg[],packet_number2_2) (with occurrence name @occ22_1) may be executed at {22}.
So the message (sci_A[],xpn(kc_5,szk[]),packet_number2_2,enc(msg[],kdf(szk[],kc_5)),hmac(enc(msg[],kdf(szk[],kc_5)),kc_5,packet_number2_2,kdf(szk[],kc_5))) may be sent to the attacker at output {23}.
attacker((sci_A[],xpn(kc_5,szk[]),packet_number2_2,enc(msg[],kdf(szk[],kc_5)),hmac(enc(msg[],kdf(szk[],kc_5)),kc_5,packet_number2_2,kdf(szk[],kc_5)))).

3. By 2, the attacker may know (sci_A[],xpn(kc_5,szk[]),packet_number2_2,enc(msg[],kdf(szk[],kc_5)),hmac(enc(msg[],kdf(szk[],kc_5)),kc_5,packet_number2_2,kdf(szk[],kc_5))).
Using the function 2-proj-5-tuple the attacker may obtain xpn(kc_5,szk[]).
attacker(xpn(kc_5,szk[])).

4. By 3, the attacker may know xpn(kc_5,szk[]).
By 1, the attacker may know szk[].
Using the function retrive_xpn the attacker may obtain kc_5.
attacker(kc_5).

5. By 1, the attacker may know szk[].
By 4, the attacker may know kc_5.
Using the function kdf the attacker may obtain kdf(szk[],kc_5).
attacker(kdf(szk[],kc_5)).

6. We assume as hypothesis that
attacker(packet_number_3).

7. The message (sci_A[],xpn(kc_6,kdf(szk[],kc_6)),1,enc(randomness_2,kdf(szk[],kc_6)),hmac(enc(randomness_2,kdf(szk[],kc_6)),kc_6,packet_number1_2,kdf(szk[],kc_6))) may be sent to the attacker at output {18}.
attacker((sci_A[],xpn(kc_6,kdf(szk[],kc_6)),1,enc(randomness_2,kdf(szk[],kc_6)),hmac(enc(randomness_2,kdf(szk[],kc_6)),kc_6,packet_number1_2,kdf(szk[],kc_6)))).

8. By 7, the attacker may know (sci_A[],xpn(kc_6,kdf(szk[],kc_6)),1,enc(randomness_2,kdf(szk[],kc_6)),hmac(enc(randomness_2,kdf(szk[],kc_6)),kc_6,packet_number1_2,kdf(szk[],kc_6))).
Using the function 1-proj-5-tuple the attacker may obtain sci_A[].
attacker(sci_A[]).

9. By 2, the attacker may know (sci_A[],xpn(kc_5,szk[]),packet_number2_2,enc(msg[],kdf(szk[],kc_5)),hmac(enc(msg[],kdf(szk[],kc_5)),kc_5,packet_number2_2,kdf(szk[],kc_5))).
Using the function 4-proj-5-tuple the attacker may obtain enc(msg[],kdf(szk[],kc_5)).
attacker(enc(msg[],kdf(szk[],kc_5))).

10. By 9, the attacker may know enc(msg[],kdf(szk[],kc_5)).
By 8, the attacker may know sci_A[].
By 6, the attacker may know packet_number_3.
By 5, the attacker may know kdf(szk[],kc_5).
Using the function hmac the attacker may obtain hmac(enc(msg[],kdf(szk[],kc_5)),sci_A[],packet_number_3,kdf(szk[],kc_5)).
attacker(hmac(enc(msg[],kdf(szk[],kc_5)),sci_A[],packet_number_3,kdf(szk[],kc_5))).

11. By 8, the attacker may know sci_A[].
By 1, the attacker may know szk[].
Using the function xpn the attacker may obtain xpn(sci_A[],szk[]).
attacker(xpn(sci_A[],szk[])).

12. By 8, the attacker may know sci_A[].
By 11, the attacker may know xpn(sci_A[],szk[]).
By 6, the attacker may know packet_number_3.
By 9, the attacker may know enc(msg[],kdf(szk[],kc_5)).
By 10, the attacker may know hmac(enc(msg[],kdf(szk[],kc_5)),sci_A[],packet_number_3,kdf(szk[],kc_5)).
Using the function 5-tuple the attacker may obtain (sci_A[],xpn(sci_A[],szk[]),packet_number_3,enc(msg[],kdf(szk[],kc_5)),hmac(enc(msg[],kdf(szk[],kc_5)),sci_A[],packet_number_3,kdf(szk[],kc_5))).
attacker((sci_A[],xpn(sci_A[],szk[]),packet_number_3,enc(msg[],kdf(szk[],kc_5)),hmac(enc(msg[],kdf(szk[],kc_5)),sci_A[],packet_number_3,kdf(szk[],kc_5)))).

13. The attacker has some term packet_number_4.
attacker(packet_number_4).

14. The attacker has some term x_2.
attacker(x_2).

15. By 14, the attacker may know x_2.
By 4, the attacker may know kc_5.
By 13, the attacker may know packet_number_4.
By 5, the attacker may know kdf(szk[],kc_5).
Using the function hmac the attacker may obtain hmac(x_2,kc_5,packet_number_4,kdf(szk[],kc_5)).
attacker(hmac(x_2,kc_5,packet_number_4,kdf(szk[],kc_5))).

16. By 8, the attacker may know sci_A[].
By 3, the attacker may know xpn(kc_5,szk[]).
By 13, the attacker may know packet_number_4.
By 14, the attacker may know x_2.
By 15, the attacker may know hmac(x_2,kc_5,packet_number_4,kdf(szk[],kc_5)).
Using the function 5-tuple the attacker may obtain (sci_A[],xpn(kc_5,szk[]),packet_number_4,x_2,hmac(x_2,kc_5,packet_number_4,kdf(szk[],kc_5))).
attacker((sci_A[],xpn(kc_5,szk[]),packet_number_4,x_2,hmac(x_2,kc_5,packet_number_4,kdf(szk[],kc_5)))).

17. The message (kc[],sci_A[],szk[]) may be sent on channel key_counter[] at output {7}.
mess(key_counter[],(kc[],sci_A[],szk[])).

18. The message (sci_A[],xpn(kc_5,szk[]),packet_number_4,x_2,hmac(x_2,kc_5,packet_number_4,kdf(szk[],kc_5))) that the attacker may have by 16 may be received at input {27}.
The message (kc[],sci_A[],szk[]) that may be sent on channel key_counter[] by 17 may be received at input {28}.
We have kc_5 ≠ kc[].
So the message (sci_A[],kc_5,kdf(szk[],kc_5)) may be sent on channel key_counter[] at output {39}.
mess(key_counter[],(sci_A[],kc_5,kdf(szk[],kc_5))).

19. The message (sci_A[],xpn(sci_A[],szk[]),packet_number_3,enc(msg[],kdf(szk[],kc_5)),hmac(enc(msg[],kdf(szk[],kc_5)),sci_A[],packet_number_3,kdf(szk[],kc_5))) that the attacker may have by 12 may be received at input {27}.
The message (sci_A[],kc_5,kdf(szk[],kc_5)) that may be sent on channel key_counter[] by 18 may be received at input {28}.
So event message_received_Bob(msg[],packet_number_3) may be executed at {34} in session @sid_1.
inj-event(message_received_Bob(msg[],packet_number_3),@occ34_1).

20. By 19, inj-event(message_received_Bob(msg[],packet_number_3),@occ34_1).
The goal is reached, represented in the following fact:
inj-event(message_received_Bob(msg[],packet_number_3),@occ34_1).


Could not find a trace corresponding to this derivation.
goal reachable: sci_Alice_2 ≠ kc[] && attacker(x_2) && attacker(packet_number_3) && attacker(sci_Alice_2) -> inj-event(message_received_Bob(dec(x_2,kdf(szk[],sci_Alice_2)),packet_number_3),@occ34_1)
Abbreviations:
@occ34_1 = @occ34[ska_A = kdf(szk[],sci_Alice_2),sci_Alice = sci_Alice_2,curr_kc = sci_A[],icv_1 = hmac(x_2,sci_A[],packet_number_3,kdf(szk[],sci_Alice_2)),x = x_2,packet_number_1 = packet_number_3,pkc = xpn(sci_A[],szk[]),sci = sci_A[],!1 = @sid]

Derivation:
Abbreviations:
@occ34_1 = @occ34[ska_A = kdf(szk[],sci_Alice_2),sci_Alice = sci_Alice_2,curr_kc = sci_A[],icv_1 = hmac(x_2,sci_A[],packet_number_3,kdf(szk[],sci_Alice_2)),x = x_2,packet_number_1 = packet_number_3,pkc = xpn(sci_A[],szk[]),sci = sci_A[],!1 = @sid]
kc_5 = kc_1[!1 = @sid_1]
randomness_2 = randomness[!1 = @sid_1]
packet_number1_2 = packet_number1[!1 = @sid_1]

1. We assume as hypothesis that
attacker(sci_Alice_2).

2. The message szk[] may be sent to the attacker at output {2}.
attacker(szk[]).

3. By 2, the attacker may know szk[].
By 1, the attacker may know sci_Alice_2.
Using the function kdf the attacker may obtain kdf(szk[],sci_Alice_2).
attacker(kdf(szk[],sci_Alice_2)).

4. We assume as hypothesis that
attacker(packet_number_3).

5. The message (sci_A[],xpn(kc_5,kdf(szk[],kc_5)),1,enc(randomness_2,kdf(szk[],kc_5)),hmac(enc(randomness_2,kdf(szk[],kc_5)),kc_5,packet_number1_2,kdf(szk[],kc_5))) may be sent to the attacker at output {18}.
attacker((sci_A[],xpn(kc_5,kdf(szk[],kc_5)),1,enc(randomness_2,kdf(szk[],kc_5)),hmac(enc(randomness_2,kdf(szk[],kc_5)),kc_5,packet_number1_2,kdf(szk[],kc_5)))).

6. By 5, the attacker may know (sci_A[],xpn(kc_5,kdf(szk[],kc_5)),1,enc(randomness_2,kdf(szk[],kc_5)),hmac(enc(randomness_2,kdf(szk[],kc_5)),kc_5,packet_number1_2,kdf(szk[],kc_5))).
Using the function 1-proj-5-tuple the attacker may obtain sci_A[].
attacker(sci_A[]).

7. We assume as hypothesis that
attacker(x_2).

8. By 7, the attacker may know x_2.
By 6, the attacker may know sci_A[].
By 4, the attacker may know packet_number_3.
By 3, the attacker may know kdf(szk[],sci_Alice_2).
Using the function hmac the attacker may obtain hmac(x_2,sci_A[],packet_number_3,kdf(szk[],sci_Alice_2)).
attacker(hmac(x_2,sci_A[],packet_number_3,kdf(szk[],sci_Alice_2))).

9. By 6, the attacker may know sci_A[].
By 2, the attacker may know szk[].
Using the function xpn the attacker may obtain xpn(sci_A[],szk[]).
attacker(xpn(sci_A[],szk[])).

10. By 6, the attacker may know sci_A[].
By 9, the attacker may know xpn(sci_A[],szk[]).
By 4, the attacker may know packet_number_3.
By 7, the attacker may know x_2.
By 8, the attacker may know hmac(x_2,sci_A[],packet_number_3,kdf(szk[],sci_Alice_2)).
Using the function 5-tuple the attacker may obtain (sci_A[],xpn(sci_A[],szk[]),packet_number_3,x_2,hmac(x_2,sci_A[],packet_number_3,kdf(szk[],sci_Alice_2))).
attacker((sci_A[],xpn(sci_A[],szk[]),packet_number_3,x_2,hmac(x_2,sci_A[],packet_number_3,kdf(szk[],sci_Alice_2)))).

11. The attacker has some term packet_number_4.
attacker(packet_number_4).

12. The attacker has some term x_3.
attacker(x_3).

13. By 12, the attacker may know x_3.
By 1, the attacker may know sci_Alice_2.
By 11, the attacker may know packet_number_4.
By 3, the attacker may know kdf(szk[],sci_Alice_2).
Using the function hmac the attacker may obtain hmac(x_3,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2)).
attacker(hmac(x_3,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2))).

14. By 1, the attacker may know sci_Alice_2.
By 2, the attacker may know szk[].
Using the function xpn the attacker may obtain xpn(sci_Alice_2,szk[]).
attacker(xpn(sci_Alice_2,szk[])).

15. By 6, the attacker may know sci_A[].
By 14, the attacker may know xpn(sci_Alice_2,szk[]).
By 11, the attacker may know packet_number_4.
By 12, the attacker may know x_3.
By 13, the attacker may know hmac(x_3,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2)).
Using the function 5-tuple the attacker may obtain (sci_A[],xpn(sci_Alice_2,szk[]),packet_number_4,x_3,hmac(x_3,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2))).
attacker((sci_A[],xpn(sci_Alice_2,szk[]),packet_number_4,x_3,hmac(x_3,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2)))).

16. The message (kc[],sci_A[],szk[]) may be sent on channel key_counter[] at output {7}.
mess(key_counter[],(kc[],sci_A[],szk[])).

17. The message (sci_A[],xpn(sci_Alice_2,szk[]),packet_number_4,x_3,hmac(x_3,sci_Alice_2,packet_number_4,kdf(szk[],sci_Alice_2))) that the attacker may have by 15 may be received at input {27}.
The message (kc[],sci_A[],szk[]) that may be sent on channel key_counter[] by 16 may be received at input {28}.
We have sci_Alice_2 ≠ kc[].
So the message (sci_A[],sci_Alice_2,kdf(szk[],sci_Alice_2)) may be sent on channel key_counter[] at output {39}.
mess(key_counter[],(sci_A[],sci_Alice_2,kdf(szk[],sci_Alice_2))).

18. The message (sci_A[],xpn(sci_A[],szk[]),packet_number_3,x_2,hmac(x_2,sci_A[],packet_number_3,kdf(szk[],sci_Alice_2))) that the attacker may have by 10 may be received at input {27}.
The message (sci_A[],sci_Alice_2,kdf(szk[],sci_Alice_2)) that may be sent on channel key_counter[] by 17 may be received at input {28}.
So event message_received_Bob(dec(x_2,kdf(szk[],sci_Alice_2)),packet_number_3) may be executed at {34} in session @sid.
inj-event(message_received_Bob(dec(x_2,kdf(szk[],sci_Alice_2)),packet_number_3),@occ34_1).

19. By 18, inj-event(message_received_Bob(dec(x_2,kdf(szk[],sci_Alice_2)),packet_number_3),@occ34_1).
The goal is reached, represented in the following fact:
inj-event(message_received_Bob(dec(x_2,kdf(szk[],sci_Alice_2)),packet_number_3),@occ34_1).


Could not find a trace corresponding to this derivation.
RESULT inj-event(message_received_Bob(m_2,packet_number_3)) ==> inj-event(message_send_Alice(m_2,packet_number_3)) cannot be proved.
RESULT (even event(message_received_Bob(m_2,packet_number_3)) ==> event(message_send_Alice(m_2,packet_number_3)) cannot be proved.)

--------------------------------------------------------------
Verification summary:

Query not (event(message_received_Bob(m_2,packet_number_3)) && attacker_p1(m_2)) cannot be proved.

Query inj-event(message_received_Bob(m_2,packet_number_3)) ==> inj-event(message_send_Alice(m_2,packet_number_3)) cannot be proved.

--------------------------------------------------------------

