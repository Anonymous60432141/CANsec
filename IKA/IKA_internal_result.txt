Linear part: No equation.
Convergent part:
dec(enc(m,k),k) = m
enc(dec(m,k),k) = m
retrive_xpn(xpn(m,k),k) = m
Completing equations...
Completed equations:
retrive_xpn(xpn(m,k),k) = m
enc(dec(m,k),k) = m
dec(enc(m,k),k) = m
Process 0 (that is, the initial process):
{1}new szk: key;
{2}new sci_A: bitstring;
{3}new msg: bitstring;
{4}new kc: number;
{5}new packet_number: number;
{6}out(key_counter, (kc,sci_A,szk));
{7}insert freshness(sci_A,kc,packet_number);
(
    {8}!
    {9}let m: bitstring = msg in
    {10}let sci_A_1: bitstring = sci_A in
    {11}let szk_1: key = szk in
    {12}new kc_1: number;
    {13}let sak_alice: key = kdf(szk_1,kc_1) in
    {14}new randomness: bitstring;
    {15}new packet_number1: number;
    {16}let icv: bitstring = hmac(enc(randomness,sak_alice),kc_1,packet_number1,sak_alice) in
    {17}out(scA, (sci_A_1,xpn(kc_1,sak_alice),1,enc(randomness,sak_alice),icv));
    {18}new packet_number2: number;
    {19}let msg_1: bitstring = enc(m,sak_alice) in
    {20}let icv2: bitstring = hmac(msg_1,kc_1,packet_number2,sak_alice) in
    {21}event message_send_Alice(m,packet_number2);
    {22}out(scA, (sci_A_1,xpn(kc_1,szk_1),packet_number2,msg_1,icv2))
) | (
    {23}!
    {24}let sci_A_2: bitstring = sci_A in
    {25}let szk_2: key = szk in
    {26}in(scA, (sci: bitstring,pkc: bitstring,packet_number_1: number,x: bitstring,icv_1: bitstring));
    {27}in(key_counter, (curr_kc: number,sci_Alice: bitstring,ska_A: key));
    {28}let kc_2: number = retrive_xpn(pkc,szk_2) in
    {29}if (kc_2 = curr_kc) then
    (
        {34}get freshness(=sci,=kc_2,fv: number) suchthat (fv = packet_number_1) in
            0
        else
            {30}if ((sci = sci_A_2) && (icv_1 = hmac(x,kc_2,packet_number_1,ska_A))) then
            {31}let received_msg: bitstring = dec(x,ska_A) in
            {32}insert freshness(sci_A_2,kc_2,packet_number_1);
            {33}event message_received_Bob(received_msg,packet_number_1)
    )
    else
        {35}let n_key: key = kdf(szk_2,kc_2) in
        {36}if ((sci = sci_A_2) && (icv_1 = hmac(x,kc_2,packet_number_1,n_key))) then
        {37}insert freshness(sci_A_2,kc_2,packet_number_1);
        {38}out(key_counter, (sci,kc_2,n_key))
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}new szk: key;
{2}new sci_A: bitstring;
{3}new msg: bitstring;
{4}new kc: number;
{5}new packet_number: number;
{6}out(key_counter, (kc,sci_A,szk));
{7}insert freshness(sci_A,kc,packet_number);
(
    {8}!
    {12}new kc_1: number;
    {14}new randomness: bitstring;
    {15}new packet_number1: number;
    {11}let szk_1: key = szk in
    {13}let sak_alice: key = kdf(szk_1,kc_1) in
    {16}let icv: bitstring = hmac(enc(randomness,sak_alice),kc_1,packet_number1,sak_alice) in
    {10}let sci_A_1: bitstring = sci_A in
    {17}out(scA, (sci_A_1,xpn(kc_1,sak_alice),1,enc(randomness,sak_alice),icv));
    {18}new packet_number2: number;
    {9}let m: bitstring = msg in
    {21}event message_send_Alice(m,packet_number2);
    {19}let msg_1: bitstring = enc(m,sak_alice) in
    {20}let icv2: bitstring = hmac(msg_1,kc_1,packet_number2,sak_alice) in
    {22}out(scA, (sci_A_1,xpn(kc_1,szk_1),packet_number2,msg_1,icv2))
) | (
    {23}!
    {26}in(scA, (sci: bitstring,pkc: bitstring,packet_number_1: number,x: bitstring,icv_1: bitstring));
    {27}in(key_counter, (curr_kc: number,sci_Alice: bitstring,ska_A: key));
    {25}let szk_2: key = szk in
    {28}let kc_2: number = retrive_xpn(pkc,szk_2) in
    {24}let sci_A_2: bitstring = sci_A in
    {29}if (kc_2 = curr_kc) then
    (
        {34}get freshness(=sci,=kc_2,fv: number) suchthat (fv = packet_number_1) in
            0
        else
            {30}if ((sci = sci_A_2) && (icv_1 = hmac(x,kc_2,packet_number_1,ska_A))) then
            {32}insert freshness(sci_A_2,kc_2,packet_number_1);
            {31}let received_msg: bitstring = dec(x,ska_A) in
            {33}event message_received_Bob(received_msg,packet_number_1)
    )
    else
        {35}let n_key: key = kdf(szk_2,kc_2) in
        {36}if ((sci = sci_A_2) && (icv_1 = hmac(x,kc_2,packet_number_1,n_key))) then
        {37}insert freshness(sci_A_2,kc_2,packet_number_1);
        {38}out(key_counter, (sci,kc_2,n_key))
)

-- Query not (event(message_received_Bob(m_1,packet_number_2)) && attacker(m_1)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not (event(message_received_Bob(m_1,packet_number_2)) && attacker(m_1))
goal reachable: attacker(packet_number_2) && attacker(m_1) -> event(message_received_Bob(m_1,packet_number_2)) && attacker(m_1)

Derivation:

1. We assume as hypothesis that
attacker(m_1).

2. The attacker has some term k.
attacker(k).

3. We assume as hypothesis that
attacker(packet_number_2).

4. The attacker has some term kc_3.
attacker(kc_3).

5. By 1, the attacker may know m_1.
By 2, the attacker may know k.
Using the function enc the attacker may obtain enc(m_1,k).
attacker(enc(m_1,k)).

6. By 5, the attacker may know enc(m_1,k).
By 4, the attacker may know kc_3.
By 3, the attacker may know packet_number_2.
By 2, the attacker may know k.
Using the function hmac the attacker may obtain hmac(enc(m_1,k),kc_3,packet_number_2,k).
attacker(hmac(enc(m_1,k),kc_3,packet_number_2,k)).

7. The message (kc[],sci_A[],szk[]) may be sent to the attacker at output {6}.
attacker((kc[],sci_A[],szk[])).

8. By 7, the attacker may know (kc[],sci_A[],szk[]).
Using the function 3-proj-3-tuple the attacker may obtain szk[].
attacker(szk[]).

9. By 4, the attacker may know kc_3.
By 8, the attacker may know szk[].
Using the function xpn the attacker may obtain xpn(kc_3,szk[]).
attacker(xpn(kc_3,szk[])).

10. By 7, the attacker may know (kc[],sci_A[],szk[]).
Using the function 2-proj-3-tuple the attacker may obtain sci_A[].
attacker(sci_A[]).

11. By 10, the attacker may know sci_A[].
By 9, the attacker may know xpn(kc_3,szk[]).
By 3, the attacker may know packet_number_2.
By 5, the attacker may know enc(m_1,k).
By 6, the attacker may know hmac(enc(m_1,k),kc_3,packet_number_2,k).
Using the function 5-tuple the attacker may obtain (sci_A[],xpn(kc_3,szk[]),packet_number_2,enc(m_1,k),hmac(enc(m_1,k),kc_3,packet_number_2,k)).
attacker((sci_A[],xpn(kc_3,szk[]),packet_number_2,enc(m_1,k),hmac(enc(m_1,k),kc_3,packet_number_2,k))).

12. The attacker has some term sci_Alice_1.
attacker(sci_Alice_1).

13. By 4, the attacker may know kc_3.
By 12, the attacker may know sci_Alice_1.
By 2, the attacker may know k.
Using the function 3-tuple the attacker may obtain (kc_3,sci_Alice_1,k).
attacker((kc_3,sci_Alice_1,k)).

14. The message (sci_A[],xpn(kc_3,szk[]),packet_number_2,enc(m_1,k),hmac(enc(m_1,k),kc_3,packet_number_2,k)) that the attacker may have by 11 may be received at input {26}.
The message (kc_3,sci_Alice_1,k) that the attacker may have by 13 may be received at input {27}.
So event message_received_Bob(m_1,packet_number_2) may be executed at {33}.
event(message_received_Bob(m_1,packet_number_2)).

15. By 14, event(message_received_Bob(m_1,packet_number_2)).
By 1, attacker(m_1).
The goals are reached, combined in the following fact:
event(message_received_Bob(m_1,packet_number_2)) && attacker(m_1).


A more detailed output of the traces is available with
  set traceDisplay = long.

new szk: key creating szk_3 at {1}

new sci_A: bitstring creating sci_A_3 at {2}

new msg: bitstring creating msg_2 at {3}

new kc: number creating kc_4 at {4}

new packet_number: number creating packet_number_3 at {5}

out(key_counter, (~M,~M_1,~M_2)) with ~M = kc_4, ~M_1 = sci_A_3, ~M_2 = szk_3 at {6}

insert freshness(sci_A_3,kc_4,packet_number_3) at {7}

in(scA, (~M_1,xpn(a,~M_2),a_1,enc(a_2,a_3),hmac(enc(a_2,a_3),a,a_1,a_3))) with ~M_1 = sci_A_3, xpn(a,~M_2) = xpn(a,szk_3) at {26} in copy a_4

in(key_counter, (a,a_5,a_3)) at {27} in copy a_4

get freshness(=sci_A_3,=retrive_xpn(xpn(a,szk_3),szk_3),fv: number) suchthat (fv = a_1): else branch taken at {34} in copy a_4

insert freshness(sci_A_3,retrive_xpn(xpn(a,szk_3),szk_3),a_1) at {32} in copy a_4

event message_received_Bob(dec(enc(a_2,a_3),a_3),a_1) at {33} in copy a_4 (goal)

The event message_received_Bob(a_2,a_1) is executed at {33} in copy a_4.
The attacker has the message a_2.
A trace has been found.
RESULT not (event(message_received_Bob(m_1,packet_number_2)) && attacker(m_1)) is false.
-- Query inj-event(message_received_Bob(m_1,packet_number_2)) ==> inj-event(message_send_Alice(m_1,packet_number_2)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query inj-event(message_received_Bob(m_1,packet_number_2)) ==> inj-event(message_send_Alice(m_1,packet_number_2))
goal reachable: attacker(sci_Alice_1) && attacker(m_1) && attacker(kc_3) && attacker(packet_number_2) && attacker(k) -> inj-event(message_received_Bob(m_1,packet_number_2),@occ33_1)
Abbreviations:
@occ33_1 = @occ33[ska_A = k,sci_Alice = sci_Alice_1,curr_kc = kc_3,icv_1 = hmac(enc(m_1,k),kc_3,packet_number_2,k),x = enc(m_1,k),packet_number_1 = packet_number_2,pkc = xpn(kc_3,szk[]),sci = sci_A[],!1 = @sid]

Derivation:
Abbreviations:
@occ33_1 = @occ33[ska_A = k,sci_Alice = sci_Alice_1,curr_kc = kc_3,icv_1 = hmac(enc(m_1,k),kc_3,packet_number_2,k),x = enc(m_1,k),packet_number_1 = packet_number_2,pkc = xpn(kc_3,szk[]),sci = sci_A[],!1 = @sid]

1. We assume as hypothesis that
attacker(k).

2. We assume as hypothesis that
attacker(packet_number_2).

3. We assume as hypothesis that
attacker(kc_3).

4. We assume as hypothesis that
attacker(m_1).

5. By 4, the attacker may know m_1.
By 1, the attacker may know k.
Using the function enc the attacker may obtain enc(m_1,k).
attacker(enc(m_1,k)).

6. By 5, the attacker may know enc(m_1,k).
By 3, the attacker may know kc_3.
By 2, the attacker may know packet_number_2.
By 1, the attacker may know k.
Using the function hmac the attacker may obtain hmac(enc(m_1,k),kc_3,packet_number_2,k).
attacker(hmac(enc(m_1,k),kc_3,packet_number_2,k)).

7. The message (kc[],sci_A[],szk[]) may be sent to the attacker at output {6}.
attacker((kc[],sci_A[],szk[])).

8. By 7, the attacker may know (kc[],sci_A[],szk[]).
Using the function 3-proj-3-tuple the attacker may obtain szk[].
attacker(szk[]).

9. By 3, the attacker may know kc_3.
By 8, the attacker may know szk[].
Using the function xpn the attacker may obtain xpn(kc_3,szk[]).
attacker(xpn(kc_3,szk[])).

10. By 7, the attacker may know (kc[],sci_A[],szk[]).
Using the function 2-proj-3-tuple the attacker may obtain sci_A[].
attacker(sci_A[]).

11. By 10, the attacker may know sci_A[].
By 9, the attacker may know xpn(kc_3,szk[]).
By 2, the attacker may know packet_number_2.
By 5, the attacker may know enc(m_1,k).
By 6, the attacker may know hmac(enc(m_1,k),kc_3,packet_number_2,k).
Using the function 5-tuple the attacker may obtain (sci_A[],xpn(kc_3,szk[]),packet_number_2,enc(m_1,k),hmac(enc(m_1,k),kc_3,packet_number_2,k)).
attacker((sci_A[],xpn(kc_3,szk[]),packet_number_2,enc(m_1,k),hmac(enc(m_1,k),kc_3,packet_number_2,k))).

12. We assume as hypothesis that
attacker(sci_Alice_1).

13. By 3, the attacker may know kc_3.
By 12, the attacker may know sci_Alice_1.
By 1, the attacker may know k.
Using the function 3-tuple the attacker may obtain (kc_3,sci_Alice_1,k).
attacker((kc_3,sci_Alice_1,k)).

14. The message (sci_A[],xpn(kc_3,szk[]),packet_number_2,enc(m_1,k),hmac(enc(m_1,k),kc_3,packet_number_2,k)) that the attacker may have by 11 may be received at input {26}.
The message (kc_3,sci_Alice_1,k) that the attacker may have by 13 may be received at input {27}.
So event message_received_Bob(m_1,packet_number_2) may be executed at {33} in session @sid.
inj-event(message_received_Bob(m_1,packet_number_2),@occ33_1).

15. By 14, inj-event(message_received_Bob(m_1,packet_number_2),@occ33_1).
The goal is reached, represented in the following fact:
inj-event(message_received_Bob(m_1,packet_number_2),@occ33_1).


A more detailed output of the traces is available with
  set traceDisplay = long.

new szk: key creating szk_3 at {1}

new sci_A: bitstring creating sci_A_3 at {2}

new msg: bitstring creating msg_2 at {3}

new kc: number creating kc_4 at {4}

new packet_number: number creating packet_number_3 at {5}

out(key_counter, (~M,~M_1,~M_2)) with ~M = kc_4, ~M_1 = sci_A_3, ~M_2 = szk_3 at {6}

insert freshness(sci_A_3,kc_4,packet_number_3) at {7}

in(scA, (~M_1,xpn(a,~M_2),a_1,enc(a_2,a_3),hmac(enc(a_2,a_3),a,a_1,a_3))) with ~M_1 = sci_A_3, xpn(a,~M_2) = xpn(a,szk_3) at {26} in copy a_4

in(key_counter, (a,a_5,a_3)) at {27} in copy a_4

get freshness(=sci_A_3,=retrive_xpn(xpn(a,szk_3),szk_3),fv: number) suchthat (fv = a_1): else branch taken at {34} in copy a_4

insert freshness(sci_A_3,retrive_xpn(xpn(a,szk_3),szk_3),a_1) at {32} in copy a_4

event message_received_Bob(dec(enc(a_2,a_3),a_3),a_1) at {33} in copy a_4 (goal)

The event message_received_Bob(a_2,a_1) is executed at {33} in copy a_4.
A trace has been found.
RESULT inj-event(message_received_Bob(m_1,packet_number_2)) ==> inj-event(message_send_Alice(m_1,packet_number_2)) is false.
RESULT (even event(message_received_Bob(m_1,packet_number_2)) ==> event(message_send_Alice(m_1,packet_number_2)) is false.)

--------------------------------------------------------------
Verification summary:

Query not (event(message_received_Bob(m_1,packet_number_2)) && attacker(m_1)) is false.

Query inj-event(message_received_Bob(m_1,packet_number_2)) ==> inj-event(message_send_Alice(m_1,packet_number_2)) is false.

--------------------------------------------------------------

