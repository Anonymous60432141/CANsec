(* Define the key type and secure communication channel *)
type key.             (* A type representing cryptographic keys *)
type number.
free scA: channel.    (* A secure public channel over which Alice and Bob communicate *)
free key_counter:channel [private].

(* Encryption, Decryption, and HMAC functions *)
fun enc(bitstring, key): bitstring.             (* Symmetric encryption function *)
fun dec(bitstring, key): bitstring.             (* Symmetric decryption function *)
fun hmac(bitstring, number, number, key): bitstring.  (* HMAC function to provide integrity checks *)
fun kdf(key, number): key.                         (* Key derivation function *)
fun xpn(number, key): bitstring.
fun retrive_xpn(bitstring, key): number.

(* Symmetric encryption and decryption equations *)
equation forall m: bitstring, k: key; dec(enc(m, k), k) = m.   (* Decrypting an encrypted message with the same key yields the original message *)
equation forall m: bitstring, k: key; enc(dec(m, k), k) = m.   (* Encrypting a decrypted message with the same key yields the original message *)
equation forall m: number, k: key; retrive_xpn(xpn(m, k), k) = m.

(* Tables holding freshness and key counter values for all peers *)
table freshness(bitstring, number, number).     (* Table tracking the latest received freshness value (packet number) for each channel and counter *)


(* Events marking message exchange between Alice and Bob *)
event message_received_Bob(bitstring, number).  (* Event indicating that Bob successfully received a message *)
event message_send_Alice(bitstring, number).    (* Event indicating that Alice sent a message *)

(* Process representing Alice sending a message to Bob *)
let Alice(m: bitstring, sci_A: bitstring, szk: key) =
    new kc:number;
    let sak_alice = kdf(szk, kc) in                             (* Derives the session association key (SAK) using the session key and counter *)
    new randomness:bitstring;      
    new packet_number1:number;         
    let icv = hmac(enc(randomness, sak_alice), kc, packet_number1, sak_alice) in    (* Computes the integrity check value (ICV) for the first packet *)
    out(scA, (sci_A, xpn(kc,sak_alice) , 1, enc(randomness, sak_alice), icv));      (* Sends the first packet with the encrypted randomness and its ICV *)
    
    new packet_number2:number;                                  (* Sets the packet number for the actual message packet *)
    let msg = enc(m, sak_alice) in                              (* Encrypts the message with the derived session key *)
    let icv2 = hmac(msg, kc, packet_number2, sak_alice) in      (* Computes the ICV for the message packet *)
    event message_send_Alice(m, packet_number2);                (* Triggers the event to indicate that Alice has sent a message *)
    out(scA, (sci_A, xpn(kc, szk), packet_number2, msg, icv2)). (* Sends the message packet with its ICV *)

(* Process representing Bob receiving and verifying a message from Alice *)
let Bob(sci_A: bitstring, szk: key) =
    in(scA, (sci: bitstring, pkc: bitstring, packet_number: number, x: bitstring, icv: bitstring)); 
    (* using private channel for persistant memory *)
    in(key_counter, (curr_kc:number, sci_Alice:bitstring, ska_A:key));
        let kc = retrive_xpn(pkc, szk) in
        if kc = curr_kc then(
            get freshness(=sci, =kc, fv) suchthat fv = packet_number in 0 else(  
            if sci = sci_A && icv = hmac(x, kc, packet_number, ska_A) then  
                (let received_msg = dec(x, ska_A) in                         
                insert freshness(sci_A, kc, packet_number);                  
                event message_received_Bob(received_msg, packet_number))     
            else 0)   
        )
        else
            (let n_key = kdf(szk, kc) in  
            if sci = sci_A  && icv = hmac(x, kc, packet_number, n_key) then
            (
                insert freshness(sci_A, kc, packet_number);        
                out(key_counter, (sci, kc, n_key))
            )
            else 0).

(* Confidentiality query: Ensure messages cannot be intercepted by an attacker *)
query m: bitstring, packet_number: number;
    event(message_received_Bob(m, packet_number)) && attacker(m) ==> false.

(* Authentication query to prevent replay attacks: Ensures only messages actually sent by Alice can be received by Bob *)
query m: bitstring, packet_number: number;
    inj-event(message_received_Bob(m, packet_number)) ==> inj-event(message_send_Alice(m, packet_number)).

(* Main process to simulate message exchange between Alice and Bob *)
process
    new szk: key;                     (* Creates a new zone key shared between Alice and Bob *)
    new sci_A: bitstring;             (* Generates a unique identifier for the secure channel *)
    new msg: bitstring;               (* Creates the message Alice will send to Bob *)
    new kc:number;
    new packet_number: number;
    out(key_counter, (kc, sci_A, szk));
    insert freshness(sci_A, kc, packet_number);    (* Initializes the freshness table with a zero value for the secure channel *)
    
    (!Alice(msg, sci_A, szk) | !Bob(sci_A, szk))  (* Spawns Alice and Bob processes for continuous message exchange *)
