digraph {
graph [ordering = out]
edge [arrowhead = none, penwidth = 1.6, fontsize = 30]
node [shape = point, width = 0, height = 0, fontsize = 30]
Trace [label = <A trace has been found.<br/>
>, shape = plaintext]
P0__0 [label = "Honest Process", shape = plaintext]
P__0 [label = "Attacker", shape = plaintext]
Trace -> P0__0 [label = "", style = invisible, weight = 100]{rank = same; P0__0 P__0}
P0__0 -> P0__1 [label = <>, weight = 100]
P0__1 -> P0__2 [label = <>, weight = 100]
P0__2 [shape = plaintext, label = <<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4"> <TR><TD><FONT COLOR="darkgreen">{1}</FONT><FONT COLOR="blue">new </FONT>szk_3</TD></TR><TR><TD><FONT COLOR="darkgreen">{2}</FONT><FONT COLOR="blue">new </FONT>sci_A_3</TD></TR><TR><TD><FONT COLOR="darkgreen">{3}</FONT><FONT COLOR="blue">new </FONT>msg_2</TD></TR><TR><TD><FONT COLOR="darkgreen">{6}</FONT><FONT COLOR="blue">insert </FONT>freshness(sci_A_3,0,0)</TD></TR><TR><TD><FONT COLOR="darkgreen">{7}</FONT><FONT COLOR="blue">new </FONT>sak_2</TD></TR><TR><TD><FONT COLOR="darkgreen">{4}</FONT><FONT COLOR="blue">let</FONT> an: nat = 1</TD></TR><TR><TD><FONT COLOR="darkgreen">{8}</FONT><FONT COLOR="blue">insert </FONT>association_keys(sci_A_3,1,sak_2)</TD></TR></TABLE>>]
P0__2 -> P0__3 [label = <>, weight = 100]
P__0 -> P__1 [label = <>, weight = 100]
{rank = same; P__1 P0__2}
/*RPar */
P0__3 -> P0_1__3 [label = <>]
P0__3 -> P0_0__3 [label = <>]
P0__3 [label = "", fixedsize = false, width = 0, height = 0, shape = none]
{rank = same; P0_0__3 P0_1__3}
P0_0__3 [label = "!", shape = ellipse]
{rank = same; P0_0_1__3 P0_0_0__3}
P0_0_1__3 [label = "", fixedsize = false, width = 0, height = 0, shape = none]
P0_0__3 -> P0_0_1__3 [label = <>]
P0_0_0__3 [label = "", fixedsize = false, width = 0, height = 0, shape = none]
P0_0__3 -> P0_0_0__3 [label = <>]
P0_0_0__3 -> P0_0_0__4 [label = <>, weight = 100]
P0_0_0__4 [shape = plaintext, label = <<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4"> <TR><TD>Beginning of process <FONT COLOR="darkgreen">Bob</FONT></TD></TR></TABLE>>]
P0_0_0__4 -> P0_0_0__5 [label = <>, weight = 100]
P0_0_1__3 -> P0_0_1__4 [label = <>, weight = 100]
P0_0_1__4 [shape = plaintext, label = <<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4"> <TR><TD>Beginning of process <FONT COLOR="darkgreen">Bob</FONT></TD></TR></TABLE>>]
P0_0_1__4 -> P0_0_1__5 [label = <>, weight = 100]
P0_1__3 [label = "!", shape = ellipse]
P0_1_0__3 [label = "", fixedsize = false, width = 0, height = 0, shape = none]
P0_1__3 -> P0_1_0__3 [label = <>, weight = 100]
P0_1_0__3 -> P0_1_0__4 [label = <>, weight = 100]
P0_1_0__4 [shape = plaintext, label = <<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4"> <TR><TD>Beginning of process <FONT COLOR="darkgreen">Alice</FONT></TD></TR><TR><TD><FONT COLOR="darkgreen">{13}</FONT><FONT COLOR="blue">let</FONT> an_1: nat = 1</TD></TR><TR><TD><FONT COLOR="darkgreen">{11}</FONT><FONT COLOR="blue">let</FONT> sci_A_1: bitstring = sci_A_3</TD></TR><TR><TD><FONT COLOR="darkgreen">{19}</FONT><FONT COLOR="blue">get </FONT>association_keys(sci_A_3,1,sak_2)</TD></TR><TR><TD><FONT COLOR="darkgreen">{14}</FONT><FONT COLOR="blue">let</FONT> packet_number: nat = 2</TD></TR><TR><TD><FONT COLOR="darkgreen">{10}</FONT><FONT COLOR="blue">let</FONT> m: bitstring = msg_2</TD></TR><TR><TD><FONT COLOR="darkgreen">{17}</FONT><FONT COLOR="blue">event</FONT> message_send_Alice(msg_2,2)</TD></TR><TR><TD><FONT COLOR="darkgreen">{15}</FONT><FONT COLOR="blue">let</FONT> msg_1: bitstring = enc(msg_2,sak_2)</TD></TR><TR><TD><FONT COLOR="darkgreen">{16}</FONT><FONT COLOR="blue">let</FONT> icv2: bitstring = hmac(enc(msg_2,sak_2),<br/>
1,2,sak_2)</TD></TR></TABLE>>]
P0_1_0__4 -> P0_1_0__5 [label = <>, weight = 100]
P__1 -> P__2 [label = <>, weight = 100]
{rank = same; P__2 P0_1_0__4}
P0_1_0__5 -> P0_1_0__6 [label = <>, weight = 100]
P0_0_1__5 -> P0_0_1__6 [label = <>, weight = 100]
P0_0_0__5 -> P0_0_0__6 [label = <>, weight = 100]
P__2 -> P__3 [label = <>, weight = 100]
{rank = same; P__3 P0_0_0__6 P0_0_1__6 P0_1_0__6}
P0_1_0__6 -> P0_1_0__7 [label = <>, weight = 100]
P__3 -> P__4 [label = <>, weight = 100]
{rank = same; P__4 P0_1_0__7}
P0_1_0__7 -> P__4 [label = <(~M,1,2,~M_1,~M_2) = (sci_A_3,1,2,enc(msg_2,sak_2),<br/>
hmac(enc(msg_2,sak_2),1,2,sak_2))>, arrowhead = normal]
P0_1_0__7 -> P0_1_0__8 [label = <>, weight = 100]
P0_0_1__6 -> P0_0_1__7 [label = <>, weight = 100]
P0_0_0__6 -> P0_0_0__7 [label = <>, weight = 100]
P__4 -> P__5 [label = <>, weight = 100]
{rank = same; P__5 P0_0_0__7 P0_0_1__7 P0_1_0__8}
P0_1_0__9 [label = "", width = 0.3, height = 0.3]
P0_1_0__8 -> P0_1_0__9 [label = <>, weight = 100]
P0_0_1__7 -> P0_0_1__8 [label = <>, weight = 100]
P0_0_0__7 -> P0_0_0__8 [label = <>, weight = 100]
P__5 -> P__6 [label = <>, weight = 100]
{rank = same; P__6 P0_0_0__8 P0_0_1__8}
P0_0_1__8 -> P0_0_1__9 [label = <>, weight = 100]
P__6 -> P__7 [label = <>, weight = 100]
{rank = same; P__7 P0_0_1__9}
P0_0_1__9 -> P__7 [label = <(~M,1,2,~M_1,~M_2) = (sci_A_3,1,2,enc(msg_2,sak_2),<br/>
hmac(enc(msg_2,sak_2),1,2,sak_2))>, dir = back, arrowhead = normal]
P0_0_1__9 -> P0_0_1__10 [label = <>, weight = 100]
P0_0_0__8 -> P0_0_0__9 [label = <>, weight = 100]
P__7 -> P__8 [label = <>, weight = 100]
{rank = same; P__8 P0_0_0__9 P0_0_1__10}
P0_0_1__10 -> P0_0_1__11 [label = <>, weight = 100]
P0_0_1__11 [shape = plaintext, label = <<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4"> <TR><TD><FONT COLOR="darkgreen">{21}</FONT><FONT COLOR="blue">let</FONT> sci_A_2: bitstring = sci_A_3</TD></TR><TR><TD><FONT COLOR="darkgreen">{35}</FONT><FONT COLOR="blue">get </FONT>association_keys(sci_A_3,1,sak_2)</TD></TR><TR><TD><FONT COLOR="darkgreen">{28}</FONT><FONT COLOR="blue">get</FONT> freshness(=sci_A_3,=1,fv: nat) <FONT COLOR="blue">suchthat</FONT><br/>
(fv &ge; 2): else branch taken</TD></TR><TR><TD><FONT COLOR="darkgreen">{24}</FONT><FONT COLOR="blue">if</FONT> ((sci_A_3 = sci_A_3) &amp;&amp; (hmac(enc(<br/>
msg_2,sak_2),1,2,sak_2) = hmac(enc(msg_2,sak_2),<br/>
1,2,sak_2)))</TD></TR></TABLE>>]
P0_0_1__11 -> P0_0_1__12 [label = <>, weight = 100]
P__8 -> P__9 [label = <>, weight = 100]
{rank = same; P__9 P0_0_1__11}
P0_0_0__9 -> P0_0_0__10 [label = <>, weight = 100]
P__9 -> P__10 [label = <>, weight = 100]
{rank = same; P__10 P0_0_0__10}
P0_0_0__10 -> P0_0_0__11 [label = <>, weight = 100]
P__10 -> P__11 [label = <>, weight = 100]
{rank = same; P__11 P0_0_0__11}
P0_0_0__11 -> P__11 [label = <(~M,1,2,~M_1,~M_2) = (sci_A_3,1,2,enc(msg_2,sak_2),<br/>
hmac(enc(msg_2,sak_2),1,2,sak_2))>, dir = back, arrowhead = normal]
P0_0_0__11 -> P0_0_0__12 [label = <>, weight = 100]
P__11 -> P__12 [label = <>, weight = 100]
{rank = same; P__12 P0_0_0__12}
P0_0_0__12 -> P0_0_0__13 [label = <>, weight = 100]
P0_0_0__13 [shape = plaintext, label = <<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4"> <TR><TD><FONT COLOR="darkgreen">{21}</FONT><FONT COLOR="blue">let</FONT> sci_A_2: bitstring = sci_A_3</TD></TR><TR><TD><FONT COLOR="darkgreen">{35}</FONT><FONT COLOR="blue">get </FONT>association_keys(sci_A_3,1,sak_2)</TD></TR><TR><TD><FONT COLOR="darkgreen">{28}</FONT><FONT COLOR="blue">get</FONT> freshness(=sci_A_3,=1,fv: nat) <FONT COLOR="blue">suchthat</FONT><br/>
(fv &ge; 2): else branch taken</TD></TR><TR><TD><FONT COLOR="darkgreen">{24}</FONT><FONT COLOR="blue">if</FONT> ((sci_A_3 = sci_A_3) &amp;&amp; (hmac(enc(<br/>
msg_2,sak_2),1,2,sak_2) = hmac(enc(msg_2,sak_2),<br/>
1,2,sak_2)))</TD></TR><TR><TD><FONT COLOR="darkgreen">{26}</FONT><FONT COLOR="blue">insert </FONT>freshness(sci_A_3,1,2)</TD></TR><TR><TD><FONT COLOR="darkgreen">{25}</FONT><FONT COLOR="blue">let</FONT> received_msg: bitstring = dec(enc(msg_2,<br/>
sak_2),sak_2)</TD></TR></TABLE>>]
P0_0_0__13 -> P0_0_0__14 [label = <>, weight = 100]
P__12 -> P__13 [label = <>, weight = 100]
{rank = same; P__13 P0_0_0__13}
P0_0_0__14 -> P0_0_0__15 [label = <>, weight = 100]
P0_0_0__15 [color = red, shape = plaintext, label = <<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4"> <TR><TD><FONT COLOR="darkgreen">{27}</FONT><FONT COLOR="blue">event</FONT> message_received_Bob(dec(enc(msg_2,sak_2),<br/>
sak_2),2)</TD></TR></TABLE>>]
P0_0_0__15 -> P0_0_0__16 [label = <>, weight = 100]
P0_0_0__17 [label = "", width = 0.3, height = 0.3]
P0_0_0__16 -> P0_0_0__17 [label = <>, weight = 100]
P0_0_1__12 -> P0_0_1__13 [label = <>, weight = 100]
P0_0_1__13 [shape = plaintext, label = <<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4"> <TR><TD><FONT COLOR="darkgreen">{26}</FONT><FONT COLOR="blue">insert </FONT>freshness(sci_A_3,1,2)</TD></TR><TR><TD><FONT COLOR="darkgreen">{25}</FONT><FONT COLOR="blue">let</FONT> received_msg: bitstring = dec(enc(msg_2,<br/>
sak_2),sak_2)</TD></TR></TABLE>>]
P0_0_1__13 -> P0_0_1__14 [label = <>, weight = 100]
P__13 -> P__14 [label = <>, weight = 100]
{rank = same; P__14 P0_0_1__13}
P0_0_1__14 -> P0_0_1__15 [label = <>, weight = 100]
P0_0_1__15 [color = red, shape = plaintext, label = <<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0" CELLPADDING="4"> <TR><TD><FONT COLOR="darkgreen">{27}</FONT><FONT COLOR="blue">event</FONT> message_received_Bob(dec(enc(msg_2,sak_2),<br/>
sak_2),2)</TD></TR></TABLE>>]
P0_0_1__15 -> P0_0_1__16 [label = <>, weight = 100]
}