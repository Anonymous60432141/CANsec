Linear part: No equation.
Convergent part:
dec(enc(m,k),k) = m
enc(dec(m,k),k) = m
Completing equations...
Completed equations:
enc(dec(m,k),k) = m
dec(enc(m,k),k) = m
Process 0 (that is, the initial process):
{1}new session_key: key;
{2}new sci_A: bitstring;
{3}new packet_number: number;
{4}new an: number;
{5}out(association_key, (sci_A,an,session_key));
{6}out(freshness, (sci_A,an,packet_number));
(
    {7}let sci_A_1: bitstring = sci_A in
    {8}new packet_number_1: number;
    {9}new msg: bitstring;
    {10}in(association_key, (sci: bitstring,an_1: number,sak: key));
    {11}let x: bitstring = enc(msg,sak) in
    {12}let icv: bitstring = hmac(x,an_1,packet_number_1,sak) in
    {13}event message_send_Alice(msg,packet_number_1);
    {14}out(scA, (sci_A_1,an_1,packet_number_1,x,icv))
) | (
    {15}in(scA, (sci_1: bitstring,an_2: number,packet_number_2: number,x_1: bitstring,icv_1: bitstring));
    {16}in(association_key, (sci_A_2: bitstring,an_key: number,sak_1: key));
    {17}if ((icv_1 ≠ hmac(x_1,an_2,packet_number_2,sak_1)) || ((sci_1 ≠ sci_A_2) || (an_2 ≠ an_key))) then
        0
    else
        {18}in(freshness, (sci_Alice: bitstring,curr_an: number,fresh: number));
        {19}if ((fresh = packet_number_2) || ((an_2 ≠ curr_an) || (sci_1 ≠ sci_Alice))) then
            0
        else
            {20}out(freshness, (sci_1,an_2,packet_number_2));
            {21}let msg_1: bitstring = dec(x_1,sak_1) in
            {22}event message_received_Bob(msg_1,packet_number_2)
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}new session_key: key;
{2}new sci_A: bitstring;
{3}new packet_number: number;
{4}new an: number;
{5}out(association_key, (sci_A,an,session_key));
{6}out(freshness, (sci_A,an,packet_number));
(
    {8}new packet_number_1: number;
    {9}new msg: bitstring;
    {10}in(association_key, (sci: bitstring,an_1: number,sak: key));
    {13}event message_send_Alice(msg,packet_number_1);
    {11}let x: bitstring = enc(msg,sak) in
    {12}let icv: bitstring = hmac(x,an_1,packet_number_1,sak) in
    {7}let sci_A_1: bitstring = sci_A in
    {14}out(scA, (sci_A_1,an_1,packet_number_1,x,icv))
) | (
    {15}in(scA, (sci_1: bitstring,an_2: number,packet_number_2: number,x_1: bitstring,icv_1: bitstring));
    {16}in(association_key, (sci_A_2: bitstring,an_key: number,sak_1: key));
    {17}if ((icv_1 ≠ hmac(x_1,an_2,packet_number_2,sak_1)) || ((sci_1 ≠ sci_A_2) || (an_2 ≠ an_key))) then
        0
    else
        {18}in(freshness, (sci_Alice: bitstring,curr_an: number,fresh: number));
        {19}if ((fresh = packet_number_2) || ((an_2 ≠ curr_an) || (sci_1 ≠ sci_Alice))) then
            0
        else
            {20}out(freshness, (sci_1,an_2,packet_number_2));
            {21}let msg_1: bitstring = dec(x_1,sak_1) in
            {22}event message_received_Bob(msg_1,packet_number_2)
)

-- Query not (event(message_received_Bob(m,packet_number_3)) && attacker(m)) in process 1.
Translating the process into Horn clauses...
Completing...
Termination warning: Selecting an hypothesis matching the conclusion.
In case of non-termination, try a noselect declaration implying the following one:
   noselect fresh_1:number; mess(freshness[],(sci_A[],an[],fresh_1)).
Starting query not (event(message_received_Bob(m,packet_number_3)) && attacker(m))
RESULT not (event(message_received_Bob(m,packet_number_3)) && attacker(m)) is true.
-- Query inj-event(message_received_Bob(m,packet_number_3)) ==> inj-event(message_send_Alice(m,packet_number_3)) in process 1.
Translating the process into Horn clauses...
Completing...
Termination warning: Selecting an hypothesis matching the conclusion.
In case of non-termination, try a noselect declaration implying the following one:
   noselect fresh_1:number; mess(freshness[],(sci_A[],an[],fresh_1)).
Starting query inj-event(message_received_Bob(m,packet_number_3)) ==> inj-event(message_send_Alice(m,packet_number_3))
goal reachable: b-inj-event(message_send_Alice(msg[],packet_number_1[]),@occ13_1) -> inj-event(message_received_Bob(dec(enc(msg[],session_key[]),session_key[]),packet_number_1[]),@occ22_1)
The hypothesis occurs strictly before the conclusion.
Abbreviations:
@occ22_1 = @occ22[fresh = packet_number[],curr_an = an[],sci_Alice = sci_A[],sak_1 = session_key[],an_key = an[],sci_A_2 = sci_A[],icv_1 = hmac(enc(msg[],session_key[]),an[],packet_number_1[],session_key[]),x_1 = enc(msg[],session_key[]),packet_number_2 = packet_number_1[],an_2 = an[],sci_1 = sci_A[]]
@occ13_1 = @occ13[sak = session_key[],an_1 = an[],sci = sci_A[]]
RESULT inj-event(message_received_Bob(m,packet_number_3)) ==> inj-event(message_send_Alice(m,packet_number_3)) is true.

--------------------------------------------------------------
Verification summary:

Query not (event(message_received_Bob(m,packet_number_3)) && attacker(m)) is true.

Query inj-event(message_received_Bob(m,packet_number_3)) ==> inj-event(message_send_Alice(m,packet_number_3)) is true.

--------------------------------------------------------------

