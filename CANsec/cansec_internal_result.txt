Linear part: No equation.
Convergent part:
dec(enc(m,k),k) = m
enc(dec(m,k),k) = m
Completing equations...
Completed equations:
enc(dec(m,k),k) = m
dec(enc(m,k),k) = m
Process 0 (that is, the initial process):
{1}new session_key: key;
{2}new sci_A: bitstring;
{3}new packet_number: number;
{4}new an: number;
{5}out(association_key, (sci_A,an,session_key));
{6}out(freshness, (sci_A,an,packet_number));
(
    {7}let sci_A_1: bitstring = sci_A in
    {8}new packet_number_1: number;
    {9}new msg: bitstring;
    {10}in(association_key, (sci: bitstring,an_1: number,sak: key));
    {11}let x: bitstring = enc(msg,sak) in
    {12}let icv: bitstring = hmac(x,an_1,packet_number_1,sak) in
    {13}event message_send_Alice(msg,packet_number_1);
    {14}out(scA, (sci_A_1,an_1,packet_number_1,x,icv))
) | (
    {15}in(scA, (sci_1: bitstring,an_2: number,packet_number_2: number,x_1: bitstring,icv_1: bitstring));
    {16}in(association_key, (sci_A_2: bitstring,an_key: number,sak_1: key));
    {17}if ((icv_1 ≠ hmac(x_1,an_2,packet_number_2,sak_1)) || ((sci_1 ≠ sci_A_2) || (an_2 ≠ an_key))) then
        0
    else
        {18}in(freshness, (sci_Alice: bitstring,curr_an: number,fresh: number));
        {19}if ((fresh = packet_number_2) || ((an_2 ≠ curr_an) || (sci_1 ≠ sci_Alice))) then
            0
        else
            {20}out(freshness, (sci_1,an_2,packet_number_2));
            {21}let msg_1: bitstring = dec(x_1,sak_1) in
            {22}event message_received_Bob(msg_1,packet_number_2)
)

--  Process 1 (that is, process 0, with let moved downwards):
{1}new session_key: key;
{2}new sci_A: bitstring;
{3}new packet_number: number;
{4}new an: number;
{5}out(association_key, (sci_A,an,session_key));
{6}out(freshness, (sci_A,an,packet_number));
(
    {8}new packet_number_1: number;
    {9}new msg: bitstring;
    {10}in(association_key, (sci: bitstring,an_1: number,sak: key));
    {13}event message_send_Alice(msg,packet_number_1);
    {11}let x: bitstring = enc(msg,sak) in
    {12}let icv: bitstring = hmac(x,an_1,packet_number_1,sak) in
    {7}let sci_A_1: bitstring = sci_A in
    {14}out(scA, (sci_A_1,an_1,packet_number_1,x,icv))
) | (
    {15}in(scA, (sci_1: bitstring,an_2: number,packet_number_2: number,x_1: bitstring,icv_1: bitstring));
    {16}in(association_key, (sci_A_2: bitstring,an_key: number,sak_1: key));
    {17}if ((icv_1 ≠ hmac(x_1,an_2,packet_number_2,sak_1)) || ((sci_1 ≠ sci_A_2) || (an_2 ≠ an_key))) then
        0
    else
        {18}in(freshness, (sci_Alice: bitstring,curr_an: number,fresh: number));
        {19}if ((fresh = packet_number_2) || ((an_2 ≠ curr_an) || (sci_1 ≠ sci_Alice))) then
            0
        else
            {20}out(freshness, (sci_1,an_2,packet_number_2));
            {21}let msg_1: bitstring = dec(x_1,sak_1) in
            {22}event message_received_Bob(msg_1,packet_number_2)
)

-- Query not (event(message_received_Bob(m,packet_number_3)) && attacker(m)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query not (event(message_received_Bob(m,packet_number_3)) && attacker(m))
goal reachable: packet_number_3 ≠ any_val && attacker(packet_number_3) && attacker(m) -> event(message_received_Bob(m,packet_number_3)) && attacker(m)

Derivation:

1. We assume as hypothesis that
attacker(m).

2. The attacker has some term k.
attacker(k).

3. We assume as hypothesis that
attacker(packet_number_3).

4. The attacker has some term an_3.
attacker(an_3).

5. By 1, the attacker may know m.
By 2, the attacker may know k.
Using the function enc the attacker may obtain enc(m,k).
attacker(enc(m,k)).

6. By 5, the attacker may know enc(m,k).
By 4, the attacker may know an_3.
By 3, the attacker may know packet_number_3.
By 2, the attacker may know k.
Using the function hmac the attacker may obtain hmac(enc(m,k),an_3,packet_number_3,k).
attacker(hmac(enc(m,k),an_3,packet_number_3,k)).

7. The attacker has some term sci_2.
attacker(sci_2).

8. By 7, the attacker may know sci_2.
By 4, the attacker may know an_3.
By 3, the attacker may know packet_number_3.
By 5, the attacker may know enc(m,k).
By 6, the attacker may know hmac(enc(m,k),an_3,packet_number_3,k).
Using the function 5-tuple the attacker may obtain (sci_2,an_3,packet_number_3,enc(m,k),hmac(enc(m,k),an_3,packet_number_3,k)).
attacker((sci_2,an_3,packet_number_3,enc(m,k),hmac(enc(m,k),an_3,packet_number_3,k))).

9. By 7, the attacker may know sci_2.
By 4, the attacker may know an_3.
By 2, the attacker may know k.
Using the function 3-tuple the attacker may obtain (sci_2,an_3,k).
attacker((sci_2,an_3,k)).

10. The attacker has some term fresh_1.
attacker(fresh_1).

11. By 7, the attacker may know sci_2.
By 4, the attacker may know an_3.
By 10, the attacker may know fresh_1.
Using the function 3-tuple the attacker may obtain (sci_2,an_3,fresh_1).
attacker((sci_2,an_3,fresh_1)).

12. The message (sci_2,an_3,packet_number_3,enc(m,k),hmac(enc(m,k),an_3,packet_number_3,k)) that the attacker may have by 8 may be received at input {15}.
The message (sci_2,an_3,k) that the attacker may have by 9 may be received at input {16}.
The message (sci_2,an_3,fresh_1) that the attacker may have by 11 may be received at input {18}.
We have fresh_1 ≠ packet_number_3.
So event message_received_Bob(m,packet_number_3) may be executed at {22}.
event(message_received_Bob(m,packet_number_3)).

13. By 12, event(message_received_Bob(m,packet_number_3)).
By 1, attacker(m).
The goals are reached, combined in the following fact:
event(message_received_Bob(m,packet_number_3)) && attacker(m).


A more detailed output of the traces is available with
  set traceDisplay = long.

new session_key: key creating session_key_1 at {1}

new sci_A: bitstring creating sci_A_3 at {2}

new packet_number: number creating packet_number_4 at {3}

new an: number creating an_4 at {4}

out(association_key, (~M,~M_1,~M_2)) with ~M = sci_A_3, ~M_1 = an_4, ~M_2 = session_key_1 at {5}

out(freshness, (~M_3,~M_4,~M_5)) with ~M_3 = sci_A_3, ~M_4 = an_4, ~M_5 = packet_number_4 at {6}

new packet_number_1: number creating packet_number_5 at {8}

new msg: bitstring creating msg_2 at {9}

in(scA, (a,a_1,a_2,enc(a_3,a_4),hmac(enc(a_3,a_4),a_1,a_2,a_4))) at {15}

in(association_key, (a,a_1,a_4)) at {16}

in(freshness, (a,a_1,a_5)) at {18}

out(freshness, (~M_6,~M_7,~M_8)) with ~M_6 = a, ~M_7 = a_1, ~M_8 = a_2 at {20}

event message_received_Bob(dec(enc(a_3,a_4),a_4),a_2) at {22} (goal)

The event message_received_Bob(a_3,a_2) is executed at {22}.
The attacker has the message a_3.
A trace has been found.
RESULT not (event(message_received_Bob(m,packet_number_3)) && attacker(m)) is false.
-- Query inj-event(message_received_Bob(m,packet_number_3)) ==> inj-event(message_send_Alice(m,packet_number_3)) in process 1.
Translating the process into Horn clauses...
Completing...
Starting query inj-event(message_received_Bob(m,packet_number_3)) ==> inj-event(message_send_Alice(m,packet_number_3))
goal reachable: fresh_1 ≠ packet_number_3 && attacker(fresh_1) && attacker(sci_2) && attacker(m) && attacker(an_3) && attacker(packet_number_3) && attacker(k) -> inj-event(message_received_Bob(m,packet_number_3),@occ22_1)
Abbreviations:
@occ22_1 = @occ22[fresh = fresh_1,curr_an = an_3,sci_Alice = sci_2,sak_1 = k,an_key = an_3,sci_A_2 = sci_2,icv_1 = hmac(enc(m,k),an_3,packet_number_3,k),x_1 = enc(m,k),packet_number_2 = packet_number_3,an_2 = an_3,sci_1 = sci_2]

Derivation:
Abbreviations:
@occ22_1 = @occ22[fresh = fresh_1,curr_an = an_3,sci_Alice = sci_2,sak_1 = k,an_key = an_3,sci_A_2 = sci_2,icv_1 = hmac(enc(m,k),an_3,packet_number_3,k),x_1 = enc(m,k),packet_number_2 = packet_number_3,an_2 = an_3,sci_1 = sci_2]

1. We assume as hypothesis that
attacker(k).

2. We assume as hypothesis that
attacker(packet_number_3).

3. We assume as hypothesis that
attacker(an_3).

4. We assume as hypothesis that
attacker(m).

5. By 4, the attacker may know m.
By 1, the attacker may know k.
Using the function enc the attacker may obtain enc(m,k).
attacker(enc(m,k)).

6. By 5, the attacker may know enc(m,k).
By 3, the attacker may know an_3.
By 2, the attacker may know packet_number_3.
By 1, the attacker may know k.
Using the function hmac the attacker may obtain hmac(enc(m,k),an_3,packet_number_3,k).
attacker(hmac(enc(m,k),an_3,packet_number_3,k)).

7. We assume as hypothesis that
attacker(sci_2).

8. By 7, the attacker may know sci_2.
By 3, the attacker may know an_3.
By 2, the attacker may know packet_number_3.
By 5, the attacker may know enc(m,k).
By 6, the attacker may know hmac(enc(m,k),an_3,packet_number_3,k).
Using the function 5-tuple the attacker may obtain (sci_2,an_3,packet_number_3,enc(m,k),hmac(enc(m,k),an_3,packet_number_3,k)).
attacker((sci_2,an_3,packet_number_3,enc(m,k),hmac(enc(m,k),an_3,packet_number_3,k))).

9. By 7, the attacker may know sci_2.
By 3, the attacker may know an_3.
By 1, the attacker may know k.
Using the function 3-tuple the attacker may obtain (sci_2,an_3,k).
attacker((sci_2,an_3,k)).

10. We assume as hypothesis that
attacker(fresh_1).

11. By 7, the attacker may know sci_2.
By 3, the attacker may know an_3.
By 10, the attacker may know fresh_1.
Using the function 3-tuple the attacker may obtain (sci_2,an_3,fresh_1).
attacker((sci_2,an_3,fresh_1)).

12. The message (sci_2,an_3,packet_number_3,enc(m,k),hmac(enc(m,k),an_3,packet_number_3,k)) that the attacker may have by 8 may be received at input {15}.
The message (sci_2,an_3,k) that the attacker may have by 9 may be received at input {16}.
The message (sci_2,an_3,fresh_1) that the attacker may have by 11 may be received at input {18}.
We have fresh_1 ≠ packet_number_3.
So event message_received_Bob(m,packet_number_3) may be executed at {22}.
inj-event(message_received_Bob(m,packet_number_3),@occ22_1).

13. By 12, inj-event(message_received_Bob(m,packet_number_3),@occ22_1).
The goal is reached, represented in the following fact:
inj-event(message_received_Bob(m,packet_number_3),@occ22_1).


A more detailed output of the traces is available with
  set traceDisplay = long.

new session_key: key creating session_key_1 at {1}

new sci_A: bitstring creating sci_A_3 at {2}

new packet_number: number creating packet_number_4 at {3}

new an: number creating an_4 at {4}

out(association_key, (~M,~M_1,~M_2)) with ~M = sci_A_3, ~M_1 = an_4, ~M_2 = session_key_1 at {5}

out(freshness, (~M_3,~M_4,~M_5)) with ~M_3 = sci_A_3, ~M_4 = an_4, ~M_5 = packet_number_4 at {6}

new packet_number_1: number creating packet_number_5 at {8}

new msg: bitstring creating msg_2 at {9}

in(scA, (a,a_1,a_2,enc(a_3,a_4),hmac(enc(a_3,a_4),a_1,a_2,a_4))) at {15}

in(association_key, (a,a_1,a_4)) at {16}

in(freshness, (a,a_1,a_5)) at {18}

out(freshness, (~M_6,~M_7,~M_8)) with ~M_6 = a, ~M_7 = a_1, ~M_8 = a_2 at {20}

event message_received_Bob(dec(enc(a_3,a_4),a_4),a_2) at {22} (goal)

The event message_received_Bob(a_3,a_2) is executed at {22}.
A trace has been found.
RESULT inj-event(message_received_Bob(m,packet_number_3)) ==> inj-event(message_send_Alice(m,packet_number_3)) is false.
RESULT (even event(message_received_Bob(m,packet_number_3)) ==> event(message_send_Alice(m,packet_number_3)) is false.)

--------------------------------------------------------------
Verification summary:

Query not (event(message_received_Bob(m,packet_number_3)) && attacker(m)) is false.

Query inj-event(message_received_Bob(m,packet_number_3)) ==> inj-event(message_send_Alice(m,packet_number_3)) is false.

--------------------------------------------------------------

