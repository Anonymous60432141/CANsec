type key.             (* A type representing cryptographic keys *)
type number.

free freshness: channel.
free association_key: channel.
free scA: channel.    

(* Encryption, Decryption, and HMAC functions *)
fun enc(bitstring, key): bitstring.             (* Symmetric encryption function *)
fun dec(bitstring, key): bitstring.             (* Symmetric decryption function *)
fun hmac(bitstring, number, number, key): bitstring.  (* HMAC function to provide integrity checks *)

(* Symmetric encryption and decryption equations *)
equation forall m: bitstring, k: key; dec(enc(m, k), k) = m.   (* Decrypting an encrypted message with the same key yields the original message *)
equation forall m: bitstring, k: key; enc(dec(m, k), k) = m.   (* Encrypting a decrypted message with the same key yields the original message *)

(* Events marking message exchange between Alice and Bob *)
event message_received_Bob(bitstring, number).  (* Event indicating that Bob successfully received a message *)
event message_send_Alice(bitstring, number).    (* Event indicating that Alice sent a message *)

(* Process representing Alice sending a message to Bob *)
let Alice(sci_A: bitstring) =
    new packet_number: number;
    new msg:bitstring;
    in(association_key, (sci:bitstring, an:number, sak:key));
    let x = enc(msg, sak) in
    let icv = hmac(x, an, packet_number, sak) in 
    event message_send_Alice(msg, packet_number);
    out(scA, (sci_A, an, packet_number, x, icv)).

(* Process representing Bob receiving and verifying a message from Alice *)
let Bob() =
    in(scA, (sci: bitstring, an: number, packet_number: number, x: bitstring, icv: bitstring)); (* Waits to receive a packet from Alice *)
    (* retriving key from the persistant memory *)
    in(association_key, (sci_A:bitstring, an_key:number, sak:key));
    if icv <> hmac(x, an, packet_number, sak) || sci <> sci_A || an <> an_key then 0 else(
        in(freshness, (sci_Alice:bitstring, curr_an:number, fresh:number));
        if fresh = packet_number || an <> curr_an || sci <> sci_Alice then 0 else(
        out(freshness, (sci, an, packet_number));
        let msg = dec(x, sak) in
        event message_received_Bob(msg, packet_number))).

(* Confidentiality query: Ensure messages cannot be intercepted by an attacker *)
query m: bitstring, packet_number: number;
    event(message_received_Bob(m, packet_number)) && attacker(m) ==> false.

(* Authentication query to prevent replay attacks: Ensures only messages actually sent by Alice can be received by Bob *)
query m: bitstring, packet_number: number;
    inj-event(message_received_Bob(m, packet_number)) ==> inj-event(message_send_Alice(m, packet_number)).

(* Main process to simulate message exchange between Alice and Bob *)
process
    new session_key: key;                                          (* Creates a new session key shared between Alice and Bob *)
    new sci_A: bitstring;                
    new packet_number:number;
    new an:number;
    out(association_key, (sci_A, an, session_key));
    out(freshness, (sci_A, an, packet_number));
    (Alice(sci_A) | Bob())        (* Spawns Alice and Bob processes for continuous message exchange *)
